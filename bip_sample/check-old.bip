@cpp(src="ext-cpp/Standard.cpp", include="Standard.hpp,stdio.h")
package check

const data int COUNT_MAX = 2
const data int DEBUG = 0

const data int OBS_TERM = 1

//extern data type bool


extern function updateVar(int,int)
extern function rdvar_down_1( int ,int )
extern function rdvar_down_2( int ,int, int, int )
extern function printf(string)
extern function printf(string, int)
extern function printf(string, int, int)
extern function printf(string, int, int, int)
extern function printf(string, int, int, int, int)


port type e0b0port()
port type e1b0port(int msg1)
port type e2b0port(int msg1,int msg2)

connector type SingletonD(e0b0port p)
	export port e0b0port xpr()
	define p
end

connector type Singleton(e0b0port p)
	define p
end

connector type BRDCAST2(e0b0port p1, e0b0port p2)
	define p1' p2
end

connector type RDV2(e0b0port p1, e0b0port p2)
	define p1 p2
end

atom type Atom1()
	export port e0b0port AtoB(), CtoB()
	port e0b0port  BtoA(), AtoC()
	
	place A, B, C
	 
	initial to A do { printf("[name:Atom1,from:initial,to:A]"); }
	on AtoB from A to B do{ printf("[name:Atom1,from:A,to:B]"); }
	on AtoC from A to C do{ printf("[name:Atom1,from:A,to:C]"); }
	on CtoB from C to B do{ printf("[name:Atom1,from:C,to:B]"); }
	on BtoA from B to A do{  printf("[name:Atom1,from:B,to:A]");  }
end

atom type Atom2()
	export port e0b0port AtoB(), CtoB()
	port e0b0port  BtoA(), AtoC()
	
	place A, B, C
	 
	initial to A do { printf("[name:Atom2,from:initial,to:A]"); }
	on AtoB from A to B do{ printf("[name:Atom2,from:A,to:B]"); }
	on AtoC from A to C do{  printf("[name:Atom2,from:A,to:C]"); }
	on CtoB from C to B do{  printf("[name:Atom2,from:C,to:B]"); }
	on BtoA from B to A do{  printf("[name:Atom2,from:B,to:A]"); }
end



compound type comp()

	component Atom1 A1()
	component Atom2 A2()

	connector RDV2 bothAB(A1.AtoB,A2.AtoB)
	connector BRDCAST2 brdcastCB(A1.CtoB, A2.CtoB)
	
	
end


end