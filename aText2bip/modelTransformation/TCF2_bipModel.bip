model TCF2_bipModel

	port type syncPort
	


connector type SINGLE(syncPort p1)
define p1
end


connector type RDV2(syncPort p1, syncPort p2)
define p1 p2
end	

connector type RDV3(syncPort p1, syncPort p2, syncPort p3)
define p1 p2 p3
end	

connector type RDV4(syncPort p1, syncPort p2, syncPort p3, syncPort p4)
define p1 p2 p3 p4
end	

connector type RDV5(syncPort p1, syncPort p2, syncPort p3, syncPort p4, syncPort p5)
define p1 p2 p3 p4 p5
end	

connector type RDV6(syncPort p1, syncPort p2, syncPort p3, syncPort p4, syncPort p5, syncPort p6)
define p1 p2 p3 p4 p5 p6
end	

connector type RDV7(syncPort p1, syncPort p2, syncPort p3, syncPort p4, syncPort p5, syncPort p6, syncPort p7)
define p1 p2 p3 p4 p5 p6 p7
end	

connector type RDV8(syncPort p1, syncPort p2, syncPort p3, syncPort p4, syncPort p5, syncPort p6, syncPort p7, syncPort p8)
define p1 p2 p3 p4 p5 p6 p7 p8
end	

 
atomic type TC_FifoManager

 
data int  occup ,sid ,ssid ,ackReq ,TC_CAP  
   
	export port  syncPort  get     
	export port  syncPort  put     
	export port  syncPort  empty     
	export port  syncPort  full   
   
	export port  syncPort  internal2     
	export port  syncPort  internal1     
	export port  syncPort  internal3   
	place S0 ,S1 ,S2 

initial to  S0 do{  
	occup=0; sid=-1; ssid=-1; ackReq=-1; TC_CAP=2;  }

 on empty from S0 to S0   
 on put from S0 to S0   do{
  occup=occup+1;  }  
 on internal3 from S0 to S1  provided( (occup==1) )   
 on put from S1 to S1  provided( !(occup==0) && !(occup==TC_CAP) )   do{
  occup=occup+1;  }  
 on get from S1 to S1  provided( !(occup==0) && !(occup==TC_CAP) )   do{
  occup=occup-1;  }  
 on internal1 from S1 to S0  provided( (occup==0) )   
 on internal2 from S1 to S2  provided( (occup==TC_CAP) )   
 on full from S2 to S2  provided( !(occup<TC_CAP) )   
 on get from S2 to S2  provided( !(occup<TC_CAP) )   do{
  occup=occup-1;  }  
 on internal3 from S2 to S1  provided( (occup<TC_CAP) )   


end

 
atomic type Sndr_PriorityManager

 
data int  sid ,ssid ,ackReq ,src  
   
	export port  syncPort  noTC     
	export port  syncPort  retTC     
	export port  syncPort  empty5     
	export port  syncPort  empty6     
	export port  syncPort  empty3     
	export port  syncPort  empty4     
	export port  syncPort  empty1     
	export port  syncPort  get1     
	export port  syncPort  empty2     
	export port  syncPort  get2     
	export port  syncPort  get3     
	export port  syncPort  get4     
	export port  syncPort  get5     
	export port  syncPort  get6     
	export port  syncPort  getTC   
 
	place S3 ,S4 ,S5 ,S6 ,S7 ,S8 ,S9 ,S11 ,S10 ,S13 ,S12 ,S0 ,S1 ,S2 

initial to  S0 do{  
	sid=-1; ssid=-1; ackReq=-1; src=-1;  }

 on getTC from S0 to S1   
 on empty1 from S1 to S2   
 on get1 from S1 to S3   do{
  src=1;  }  
 on retTC from S3 to S0   
 on empty2 from S2 to S4   
 on get2 from S2 to S5   do{
  src=2;  }  
 on retTC from S5 to S0   
 on empty3 from S4 to S6   
 on get3 from S4 to S7   do{
  src=3;  }  
 on retTC from S7 to S0   
 on empty4 from S6 to S8   
 on get4 from S6 to S9   do{
  src=4;  }  
 on retTC from S9 to S0   
 on empty5 from S8 to S10   
 on get5 from S8 to S11   do{
  src=5;  }  
 on retTC from S11 to S0   
 on empty6 from S10 to S12   
 on get6 from S10 to S13   do{
  src=6;  }  
 on retTC from S13 to S0   
 on noTC from S12 to S0   


end

 
atomic type SndrMng_ActFlowAbort

 
data int  sid ,ssid ,ackReq ,src  
   
	export port  syncPort  noTC     
	export port  syncPort  askMod     
	export port  syncPort  retTC     
	export port  syncPort  start     
	export port  syncPort  modAccX     
	export port  syncPort  done     
	export port  syncPort  verif     
	export port  syncPort  lckRej     
	export port  syncPort  modAcc     
	export port  syncPort  askLck     
	export port  syncPort  lckAccX     
	export port  syncPort  lckAcc     
	export port  syncPort  getTC     
	export port  syncPort  modRej     
	export port  syncPort  verifRet   
 
	place S3 ,S4 ,S5 ,S6 ,S7 ,S8 ,S9 ,S0 ,S1 ,S2 

initial to  S0 do{  
	sid=-1; ssid=-1; ackReq=-1; src=-1;  }

 on start from S0 to S1   
 on getTC from S1 to S2   
 on retTC from S2 to S3   
 on noTC from S2 to S0   
 on askLck from S3 to S4   
 on lckAccX from S4 to S5   
 on lckAcc from S4 to S5   
 on lckRej from S4 to S0   
 on askMod from S5 to S6   
 on modAccX from S6 to S7   
 on modAcc from S6 to S7   
 on modRej from S6 to S0   
 on verif from S7 to S8   
 on verifRet from S8 to S9   
 on done from S9 to S0   


end

 
atomic type ModeController

   
	export port  syncPort  askMod     
	export port  syncPort  modAcc     
	export port  syncPort  modAccX     
	export port  syncPort  modRej   
 
	place S0 ,S1 

initial to  S0 do{  }

 on askMod from S0 to S1   
 on modAcc from S1 to S0   
 on modAccX from S1 to S0   
 on modRej from S1 to S0   


end

 
atomic type TcProc_ModeManager

   
	export port  syncPort  nomin     
	export port  syncPort  restr     
	export port  syncPort  setNom     
	export port  syncPort  setRestr   
 
	place RES ,NOM 

initial to  RES do{  }

 on restr from RES to RES   
 on setNom from RES to NOM   
 on setRestr from NOM to RES   
 on nomin from NOM to NOM   


end

 
atomic type ModeReject_Monitor

   
	export port  syncPort  fail     
	export port  syncPort  tm1_4   
 
	place S0 ,S1 

initial to  S0 do{  }

 on fail from S0 to S1   
 on tm1_4 from S1 to S0   


end

 
atomic type PUSsvc1

   
	export port  syncPort  tm1_7     
	export port  syncPort  tm1_8     
	export port  syncPort  tm1_4     
	export port  syncPort  tm1_1     
	export port  syncPort  tm1_2   
 
	place S0 

initial to  S0 do{  }

 on tm1_4 from S0 to S0   
 on tm1_2 from S0 to S0   
 on tm1_8 from S0 to S0   
 on tm1_7 from S0 to S0   
 on tm1_1 from S0 to S0   


end

 
atomic type LockController

   
	export port  syncPort  lckRej     
	export port  syncPort  askLck     
	export port  syncPort  lckAccX     
	export port  syncPort  lckAcc   
 
	place S0 ,S1 

initial to  S0 do{  }

 on askLck from S0 to S1   
 on lckAcc from S1 to S0   
 on lckAccX from S1 to S0   
 on lckRej from S1 to S0   


end

 
atomic type TcProc_LockManager

   
	export port  syncPort  setLock     
	export port  syncPort  setUlock     
	export port  syncPort  ulock     
	export port  syncPort  lock   
 
	place ULOCK ,LOCK 

initial to  ULOCK do{  }

 on ulock from ULOCK to ULOCK   
 on setLock from ULOCK to LOCK   
 on setUlock from LOCK to ULOCK   
 on lock from LOCK to LOCK   


end

 
atomic type LockReject_Monitor

   
	export port  syncPort  fail     
	export port  syncPort  tm1_2   
 
	place S0 ,S1 

initial to  S0 do{  }

 on fail from S0 to S1   
 on tm1_2 from S1 to S0   


end

 
atomic type PUSsvc228

   
	export port  syncPort  exec228_2     
	export port  syncPort  exec228_3     
	export port  syncPort  exec228_1     
	export port  syncPort  exec228_4   
 
	place S0 

initial to  S0 do{  }

 on exec228_1 from S0 to S0   
 on exec228_2 from S0 to S0   
 on exec228_3 from S0 to S0   
 on exec228_4 from S0 to S0   


end

 
atomic type SndrPrior0_ActFlowAbort

   
	export port  syncPort  emptyOPS     
	export port  syncPort  getOPS     
	export port  syncPort  getMTL     
	export port  syncPort  start     
	export port  syncPort  ask0     
	export port  syncPort  emptyMTL   
 
	place S3 ,S0 ,S1 ,S2 

initial to  S0 do{  }

 on start from S0 to S1   
 on ask0 from S1 to S2   
 on getMTL from S2 to S0   
 on emptyMTL from S2 to S3   
 on getOPS from S3 to S0   
 on emptyOPS from S3 to S0   


end

 
atomic type SndrPrior1_ActFlowAbort

   
	export port  syncPort  emptyOPS     
	export port  syncPort  getOPS     
	export port  syncPort  ask1     
	export port  syncPort  getMTL     
	export port  syncPort  start     
	export port  syncPort  emptyMTL   
 
	place S3 ,S0 ,S1 ,S2 

initial to  S0 do{  }

 on start from S0 to S1   
 on ask1 from S1 to S2   
 on getOPS from S2 to S0   
 on emptyOPS from S2 to S3   
 on getMTL from S3 to S0   
 on emptyMTL from S3 to S0   


end

 
atomic type SndrPrior_ModeManager

   
	export port  syncPort  start1     
	export port  syncPort  start0     
	export port  syncPort  set1     
	export port  syncPort  set0   
 
	place S0 ,S1 

initial to  S0 do{  }

 on start0 from S0 to S0   
 on set1 from S0 to S1   
 on set0 from S1 to S0   
 on start1 from S1 to S1   


end



compound type TCFunction


	component TC_FifoManager TCFIFO 
	component Sndr_PriorityManager SNDRPRIOR 
	component SndrMng_ActFlowAbort SNDRACTFLAB 
	component ModeController MODCTRL 
	component LockController LCKCTRL 
	component TcProc_ModeManager TCPROCMOD 
	component ModeReject_Monitor MODREJMON 
	component TcProc_LockManager TCLOCKMOD 
	component LockReject_Monitor LOCKREJMON 
	component SndrPrior0_ActFlowAbort PRIORACTFLAB0 
	component SndrPrior1_ActFlowAbort PRIORACTFLAB1 
	component SndrPrior_ModeManager PRIORMOD 
	component PUSsvc1 PUS1 
	component PUSsvc228 PUS228 

 
	connector RDV2 nfullFifo ( TCFIFO.get ,SNDRPRIOR.get5   )  
	connector RDV2 empty5 ( TCFIFO.empty ,SNDRPRIOR.empty5   )  
	connector RDV2 SNDRMNGgetTC ( SNDRACTFLAB.getTC ,SNDRPRIOR.getTC   )  
	connector RDV2 SNDRMNGretTC ( SNDRPRIOR.retTC ,SNDRACTFLAB.retTC   )  
	connector RDV2 SNDRMNGnoTCs ( SNDRPRIOR.noTC ,SNDRACTFLAB.noTC   )  
	connector RDV2 askMod ( SNDRACTFLAB.askMod ,MODCTRL.askMod   )  
	connector RDV3 modAcc ( SNDRACTFLAB.modAcc ,MODCTRL.modAcc ,TCPROCMOD.nomin   )  
	connector RDV3 modAccX ( SNDRACTFLAB.modAccX ,MODCTRL.modAccX ,TCPROCMOD.restr   )  
	connector RDV4 modRej ( SNDRACTFLAB.modRej ,MODCTRL.modRej ,TCPROCMOD.restr ,MODREJMON.fail   )  
	connector RDV2 askLck ( SNDRACTFLAB.askLck ,LCKCTRL.askLck   )  
	connector RDV3 lckAcc ( SNDRACTFLAB.lckAcc ,LCKCTRL.lckAcc ,TCLOCKMOD.ulock   )  
	connector RDV3 lckAccX ( SNDRACTFLAB.lckAccX ,LCKCTRL.lckAccX ,TCLOCKMOD.lock   )  
	connector RDV4 lckRej ( SNDRACTFLAB.lckRej ,LCKCTRL.lckRej ,TCLOCKMOD.lock ,LOCKREJMON.fail   )  
	connector RDV2 MODREJMON_tm1_4 ( MODREJMON.tm1_4 ,PUS1.tm1_4   )  
	connector RDV2 LOCKREJMON_tm1_2 ( LOCKREJMON.tm1_2 ,PUS1.tm1_2   )  
	connector RDV2 start0 ( PRIORMOD.start0 ,PRIORACTFLAB0.ask0   )  
	connector RDV2 start1 ( PRIORMOD.start1 ,PRIORACTFLAB1.ask1   )  
	connector RDV2 getMTLget3 ( SNDRPRIOR.get3 ,PRIORACTFLAB0.getMTL   )  
	connector RDV2 getMTLempty3 ( SNDRPRIOR.empty3 ,PRIORACTFLAB0.emptyMTL   )  
	connector RDV2 getOPSget4 ( SNDRPRIOR.get4 ,PRIORACTFLAB0.getOPS   )  
	connector RDV2 getOPSempty4 ( SNDRPRIOR.empty4 ,PRIORACTFLAB0.emptyOPS   )  
	connector RDV2 getOPSget3 ( SNDRPRIOR.get3 ,PRIORACTFLAB1.getOPS   )  
	connector RDV2 getOPSempty3 ( SNDRPRIOR.empty3 ,PRIORACTFLAB1.emptyOPS   )  
	connector RDV2 getMTLget4 ( SNDRPRIOR.get4 ,PRIORACTFLAB1.getMTL   )  
	connector RDV2 getMTLempty4 ( SNDRPRIOR.empty4 ,PRIORACTFLAB1.emptyMTL   )  
	connector SINGLE SNDRACTFLAB_verifRet ( SNDRACTFLAB.verifRet   )  
	connector SINGLE PUS1_tm1_2 ( PUS1.tm1_2   )  
	/* execOK_ack_228_12 > execOK_ack_228_11 */
	connector RDV2 execOK_ack_228_12 ( PUS228.exec228_1 ,TCPROCMOD.setNom   )  
	connector SINGLE execOK_ack_228_11 ( PUS228.exec228_1   )  
	/* execOK_ack_228_2 > execOK_ack_228_21 */
	connector RDV2 execOK_ack_228_22 ( PUS228.exec228_2 ,TCPROCMOD.setRestr   )  
	connector SINGLE execOK_ack_228_21 ( PUS228.exec228_2   )  
	/* execOK_ack_228_3 > execOK_ack_228_31 */
	connector RDV2 execOK_ack_228_32 ( PUS228.exec228_3 ,TCLOCKMOD.setUlock   )  
	connector SINGLE execOK_ack_228_31 ( PUS228.exec228_3   )  
	/* execOK_ack_228_4 > execOK_ack_228_41 */
	connector RDV2 execOK_ack_228_42 ( PUS228.exec228_4 ,TCLOCKMOD.setUlock   )  
	connector SINGLE execOK_ack_228_41 ( PUS228.exec228_4   )  
	connector SINGLE tm1_7 ( PUS1.tm1_7   )  
	connector SINGLE tm1_8 ( PUS1.tm1_8   )  
	connector SINGLE tm1_2 ( PUS1.tm1_2   )  
	connector SINGLE verif ( SNDRACTFLAB.verif   )  
	connector SINGLE verifRet ( SNDRACTFLAB.verifRet   )  
	connector SINGLE TCFIFO_put ( TCFIFO.put   )  
	connector SINGLE TCFIFO_full ( TCFIFO.full   )  
	connector SINGLE TCFIFO_internal2 ( TCFIFO.internal2   )  
	connector SINGLE TCFIFO_internal1 ( TCFIFO.internal1   )  
	connector SINGLE TCFIFO_internal3 ( TCFIFO.internal3   )  
	connector SINGLE SNDRPRIOR_empty6 ( SNDRPRIOR.empty6   )  
	connector SINGLE SNDRPRIOR_empty1 ( SNDRPRIOR.empty1   )  
	connector SINGLE SNDRPRIOR_get1 ( SNDRPRIOR.get1   )  
	connector SINGLE SNDRPRIOR_empty2 ( SNDRPRIOR.empty2   )  
	connector SINGLE SNDRPRIOR_get2 ( SNDRPRIOR.get2   )  
	connector SINGLE SNDRPRIOR_get6 ( SNDRPRIOR.get6   )  
	connector SINGLE SNDRACTFLAB_start ( SNDRACTFLAB.start   )  
	connector SINGLE SNDRACTFLAB_done ( SNDRACTFLAB.done   )  
	connector SINGLE TCLOCKMOD_setLock ( TCLOCKMOD.setLock   )  
	connector SINGLE PRIORACTFLAB0_start ( PRIORACTFLAB0.start   )  
	connector SINGLE PRIORACTFLAB1_start ( PRIORACTFLAB1.start   )  
	connector SINGLE PRIORMOD_set1 ( PRIORMOD.set1   )  
	connector SINGLE PRIORMOD_set0 ( PRIORMOD.set0   )  
	connector SINGLE PUS1_tm1_1 ( PUS1.tm1_1   ) 

	
 
	priority execOK_ack_228_11_after_execOK_ack_228_12 		execOK_ack_228_11 < execOK_ack_228_12 
	priority execOK_ack_228_21_after_execOK_ack_228_22 		execOK_ack_228_21 < execOK_ack_228_22 
	priority execOK_ack_228_31_after_execOK_ack_228_32 		execOK_ack_228_31 < execOK_ack_228_32 
	priority execOK_ack_228_41_after_execOK_ack_228_42 		execOK_ack_228_41 < execOK_ack_228_42

end

component TCFunction Root

end