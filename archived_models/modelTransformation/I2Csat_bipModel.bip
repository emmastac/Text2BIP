model I2Csat_bipModel

	port type syncPort
	


connector type SINGLE(syncPort p1)
define p1
end


connector type RDV2(syncPort p1, syncPort p2)
define p1 p2
end	

connector type RDV3(syncPort p1, syncPort p2, syncPort p3)
define p1 p2 p3
end	

connector type RDV4(syncPort p1, syncPort p2, syncPort p3, syncPort p4)
define p1 p2 p3 p4
end	

connector type RDV5(syncPort p1, syncPort p2, syncPort p3, syncPort p4, syncPort p5)
define p1 p2 p3 p4 p5
end	

connector type RDV6(syncPort p1, syncPort p2, syncPort p3, syncPort p4, syncPort p5, syncPort p6)
define p1 p2 p3 p4 p5 p6
end	

connector type RDV7(syncPort p1, syncPort p2, syncPort p3, syncPort p4, syncPort p5, syncPort p6, syncPort p7)
define p1 p2 p3 p4 p5 p6 p7
end	

connector type RDV8(syncPort p1, syncPort p2, syncPort p3, syncPort p4, syncPort p5, syncPort p6, syncPort p7, syncPort p8)
define p1 p2 p3 p4 p5 p6 p7 p8
end	

 
atomic type I2C_satActionFlow

 
data int  no_msg ,bad_crc  
   
	export port  syncPort  poll     
	export port  syncPort  no_message     
	export port  syncPort  error1     
	export port  syncPort  return   
 
	place READ ,VERIFY 

initial to  READ do{  
	no_msg=0; bad_crc=0;  }

 on poll from READ to VERIFY   do{
  no_msg=-1; bad_crc=-1; /* -1 for nDeterminism */  }  
 on no_message from VERIFY to READ  provided( (no_msg==-1 || no_msg==1) )   
 on return from VERIFY to READ  provided( (no_msg==-1 || bad_crc ==-1 || ( no_msg==0 &&  bad_crc==0) ) )   
 on error1 from VERIFY to READ  provided( (bad_crc==-1 || bad_crc==1) )   


end

 
atomic type I2C_satActionFlowWithAbort

 
data int  max_poll ,count_poll ,max_write ,count_write  
   
	export port  syncPort  request     
	export port  syncPort  send     
	export port  syncPort  error3     
	export port  syncPort  return     
	export port  syncPort  error2   
 
	place READ ,IDLE ,WRITE 

initial to  IDLE do{  
	max_write=2; max_poll=2; count_poll=0; count_write=0;  }

 on request from IDLE to WRITE   
 on send from WRITE to READ  provided( (max_write==-1 || count_write<max_write ) )   do{
  count_write = count_write+1;  }  
 on error3 from WRITE to IDLE  provided( (max_write==-1 || count_write==max_write ) )   do{
  count_write=0;  }  
 on return from READ to IDLE  provided( (max_poll==-1 || count_poll<max_poll ) )   do{
  count_poll = count_poll+1;  }  
 on error2 from READ to IDLE  provided( (max_poll==-1 || count_poll==max_poll ) )   do{
  count_poll = 0;  }  


end

 
atomic type I2C_satModeManagement

   
	export port  syncPort  poll     
	export port  syncPort  send     
	export port  syncPort  return   
 
	place S0 ,S1 

initial to  S0 do{  }

 on send from S0 to S1   
 on poll from S1 to S1   
 on return from S1 to S0   


end

 
atomic type I2C_satLibrary

   
	export port  syncPort  masterWrite     
	export port  syncPort  masterRead   
 
	place S0 

initial to  S0 do{  }

 on masterWrite from S0 to S0   
 on masterRead from S0 to S0   


end



compound type CubETH


	component I2C_satActionFlow I2C_SAT_ACTFL 
	component I2C_satActionFlowWithAbort I2C_SAT_ACTFLAB 
	component I2C_satModeManagement I2C_SAT_MODMNG 
	component I2C_satLibrary I2C_SAT_LIB 

 
	/* TODO: add in .smv file : HKPL_I2C_res4 > ..3, 2, 1 & 2 > 1, 3 > 1 */
	connector RDV3 cdms_I2C_res4 ( I2C_SAT_ACTFL.return ,I2C_SAT_ACTFLAB.return ,I2C_SAT_MODMNG.return   )  
	connector RDV2 cdms_I2C_res3 ( I2C_SAT_ACTFL.return ,I2C_SAT_ACTFLAB.return   )  
	connector SINGLE cdms_I2C_res_error2 ( I2C_SAT_ACTFLAB.error2   )  
	connector SINGLE cdms_I2C_res_error3 ( I2C_SAT_ACTFLAB.error3   )  
	connector SINGLE cdms_I2C_ask ( I2C_SAT_ACTFLAB.request   )  
	/******** I2C_sat ***********/
	connector RDV3 I2C_sat_poll ( I2C_SAT_ACTFL.poll ,I2C_SAT_MODMNG.poll ,I2C_SAT_LIB.masterRead   )  
	/* TODO: add in .smv file : I2C_send3 > 2, 1 */
	connector RDV3 I2C_sat_send2 ( I2C_SAT_ACTFLAB.send ,I2C_SAT_LIB.masterWrite ,I2C_SAT_MODMNG.send   )  
	connector RDV2 I2C_sat_send1 ( I2C_SAT_ACTFLAB.send ,I2C_SAT_LIB.masterWrite   )  
	connector SINGLE I2C_sat_error1 ( I2C_SAT_ACTFL.error1   )  
	connector SINGLE I2C_SAT_ACTFL_no_message ( I2C_SAT_ACTFL.no_message   ) 

	
 
	priority cdms_I2C_res3_after_cdms_I2C_res4 		cdms_I2C_res3 < cdms_I2C_res4 
	priority I2C_sat_send1_after_I2C_sat_send2 		I2C_sat_send1 < I2C_sat_send2

end

component CubETH Root

end