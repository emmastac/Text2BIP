$!-------------------------WatchdogReset---------------------------------------!$
atom: WatchdogReset
documentation: Part of the CDMS_status. There is an implementation for the CDSM_STATUS component and there are timing ports there.
data: timer
init: S0
initAct: timer=0;
ports: 
S0,S1,internal_watchdog, ,timer = 0;
$! 
S1,S2,*external_watchdog
S2,S0,done 
!$
S1,S0,done 
end

$!-------------------------CdmsStatusActionFlow---------------------------------------!$
atom: CdmsStatusActionFlow
init: NOMINAL
ports: 
NOMINAL,START,start
START,RESET,start_reset
RESET,HEARTBEAT,done_reset
HEARTBEAT,ASKED,I2C_ask
ASKED,RESULT,I2C_res
RESULT,NOMINAL,finish
end

$!-------------------------MessageLibrary---------------------------------------!$
atom: MessageLibrary
init: S0
ports: 
S0,S0,decodeMessage
S0,S0,composeMessage
end

 $!-------------------------sMutex---------------------------------------!$
atom: sMutex
init: IDLE
ports: 
IDLE,BUSY,take
BUSY,IDLE,release
end

 $!-------------------------s128_4ActionFlowWithAbort---------------------------------------!$
atom: s128_4ActionFlowWithAbort
documentation: Part of the s128_4
init: IDLE
ports: 
IDLE ,BUSY ,start
BUSY ,VALIDATE , tc128_4
VALIDATE ,START ,exec
VALIDATE ,IDLE ,wrong_state
START ,I2C ,I2C_ask
I2C ,IDLE ,I2C_fail
I2C ,END ,I2C_res
END ,IDLE ,executed
END ,IDLE ,fail
end

 $!-------------------------s128_1ActionFlowWithAbort---------------------------------------!$
atom: s128_1ActionFlowWithAbort
documentation: Part of the s128_1
init: IDLE
ports: 
IDLE ,BUSY ,start
BUSY ,VALIDATE , tc128_1
VALIDATE ,START ,load
VALIDATE ,IDLE ,wrong_state
START ,I2C ,I2C_ask
I2C ,IDLE ,I2C_fail
I2C ,END ,I2C_res
END ,IDLE ,loaded
END ,IDLE ,fail
end

 $!-------------------------s128_5ActionFlowWithAbort---------------------------------------!$
atom: s128_5ActionFlowWithAbort
documentation: Part of the s128_5
init: IDLE
ports: 
IDLE ,START , tc128_5
START ,I2C ,I2C_ask
I2C ,IDLE ,I2C_fail
I2C ,END ,I2C_res
END ,IDLE ,aborted
END ,IDLE ,fail
end

 $!-------------------------status_statusVerificationActionFlowWithAbort-----------------!$
atom: statusVerificationActionFlowWithAbort
documentation: Part of the status_verification
init: IDLE
ports: 
IDLE ,CHECK_STATUS ,started
CHECK_STATUS ,I2C ,I2C_ask
I2C ,IDLE ,I2C_fail
I2C ,END ,I2C_res
END ,IDLE ,complete
END ,IDLE ,full
end

$!-------------------------plModeManager---------------------------------------!$
atom: plModeManager
init: IDLE
ports: 
IDLE ,IDLE, load
IDLE, SCENARIO_READY, to_scenario_ready
SCENARIO_READY, SCENARIO_READY, exec
SCENARIO_READY, IDLE, to_idle
SCENARIO_READY, STARTED, to_started
STARTED, STARTED, started
STARTED, IDLE, to_idle
STARTED, RESULT_READY, to_result_ready
RESULT_READY, STARTED, to_started
RESULT_READY, RESULT_READY, ready
RESULT_READY, IDLE, to_idle
end
 
$!-------------------------data_transferActionFlowWithAbort-------------!$
atom: data_transferActionFlowWithAbort
data: finish
init: IDLE
initAct: finish=0;
ports: 
IDLE ,ACQUIRE, start
ACQUIRE, I2C, I2C_ask
I2C, IDLE, I2C_fail
I2C, SAVE, I2C_res
SAVE, MEM, ask_mem
MEM, END, mem_res, , finish=-1; /* finished=-1, as long as it is non-deterministically assigned */
END, IDLE, done, (finish==-1 || finish==1)
END, IDLE, not_done, (finish==-1 || finish==0)
end
  
$!-------------------------data_transferModeManager---------------------------------------!$
atom: data_transferModeManager
init: IDLE
ports: 
IDLE,BUSY,to_busy
BUSY,IDLE,to_idle
BUSY,BUSY, contin
end

 $!-------------------------I2C_satActionFlow---------------------------------------!$
atom: I2C_satActionFlow
data: no_msg, bad_crc
init: READ
initAct: no_msg=0; bad_crc=0;
ports: 
READ,VERIFY,poll, , no_msg=-1; bad_crc=-1; /* -1 for nDeterminism */
VERIFY,READ,no_message, (no_msg==-1 || no_msg==1)
VERIFY,READ,return, (no_msg==-1 || bad_crc ==-1 || ( no_msg==0 &&  bad_crc==0) )
VERIFY,READ,error1, (bad_crc==-1 || bad_crc==1)
end

$!-------------------------I2C_satActionFlowWithAbort---------------------------------------!$
atom: I2C_satActionFlowWithAbort
data: max_poll, count_poll, max_write, count_write
init: IDLE
initAct: max_write=2; max_poll=2; count_poll=0; count_write=0;
ports: 
IDLE, WRITE, request
WRITE, READ, send, (max_write==-1 || count_write<max_write ), count_write = count_write+1;
WRITE, IDLE, error3, (max_write==-1 || count_write==max_write ) , count_write = 0;
READ, IDLE, return, (max_poll==-1 || count_poll<max_poll ) , count_poll = count_poll+1;
READ, IDLE, error2, (max_poll==-1 || count_poll==max_poll ) , count_poll = 0;
end

$!-------------------------I2C_satModeManagement---------------------------------------!$
atom: I2C_satModeManagement
init: S0
ports: 
S0, S1, send
S1, S1, poll
S1, S0, return
end

$!-------------------------I2C_satLibrary---------------------------------------!$
atom: I2C_satLibrary
init: S0
ports: 
S0, S0, masterWrite
S0, S0, masterRead
end

$!-------------------------Log---------------------------------------!$
atom: Log
init: IDLE
ports: 
IDLE, IDLE, log
IDLE, IDLE, done
end


$!-------------------------flash_memory_readModeManager---------------------------------------!$
atom: flash_memory_readModeManager
init: IDLE
ports: 
IDLE, READ, read
READ, IDLE, done
READ, READ, contin
end

$!-------------------------flash_memory_writeModeManager---------------------------------------!$
atom: flash_memory_writeModeManager
init: IDLE
ports: 
IDLE, READ, write
READ, IDLE, done
READ, READ, contin
end

$!-------------------------flash_memory_readActionFlowWithAbort---------------------------------------!$
atom: flash_memory_readActionFlowWithAbort
init: READ_BUFFER
ports: 
READ_BUFFER, CRC, read
CRC, STATUS_READ, check_CRC
STATUS_READ, READ_BUFFER, bad_CRC
STATUS_READ, READ_BUFFER, fail
STATUS_READ, DONE, ok_read
DONE, IDLE, finish
end

$!-------------------------flash_memory_writeActionFlowWithAbort---------------------------------------!$
atom: flash_memory_writeActionFlowWithAbort
init: WRITE_BUFFER
ports: 
WRITE_BUFFER, WAIT, write
WAIT, STATUS_WRITE, wait
STATUS_WRITE, WRITE_BUFFER, contin
STATUS_WRITE, WRITE_BUFFER, fail
STATUS_WRITE, DONE, ok_write
DONE, WRITE_BUFFER, finish
end

$!-------------------------memory_library---------------------------------------!$
atom: memory_library
init: S0
ports: 
S0, S0, setWrite
S0, S0, setRead
S0, S0, checkCRC
end

$!-------------------------HK_PL_processActionFlowWithAbort---------------------------------------!$
atom: HK_PL_processActionFlowWithAbort
data: timer, period
init: WAIT
initAct: timer=0; period = -1;
ports: 
WAIT, START, read_HK, (period==-1 || timer == period ) /* to increase the timer we need timer ports */
START, I2C, I2C_ask_PL
I2C, SEND_HK_REPORT, I2C_res_PL
I2C, WAIT, I2C_fail_PL
SEND_HK_REPORT, ASK, ask
ASK, WAIT, mem_res
ASK, WAIT, I2C_res_TTC
end

$!-------------------------HK_PL_FailureMonitoring---------------------------------------!$
atom: HK_PL_FailureMonitoring
data: timer, max_timer
init: NOMINAL
initAct: timer=0; max_timer = -1;
ports: 
NOMINAL, ANOMALY, failure
ANOMALY, CRITICAL_FAILURE, I2C_ask_PL, (max_timer==-1 || timer > max_timer )
ANOMALY, NOMINAL, success, (max_timer==-1 || timer > max_timer )
CRITICAL_FAILURE, NOMINAL, I2C_res_PL
end

$!-------------------------HK_PL_PacketStoreModeManager---------------------------------------!$
atom: HK_PL_PacketStoreModeManager
init: MEMORY
ports: 
MEMORY, TTC, disable
MEMORY, MEMORY, mem_write_req
TTC, TTC, ask_I2C_TTC
TTC, MEMORY, enable
end

$!-------------------------HK_PL_ModeManager---------------------------------------!$
atom: HK_PL_ModeManager
init: ENABLED
ports: 
ENABLED, DISABLED, disable
ENABLED, ENABLED, read_HK
DISABLED, ENABLED, enable
end

$!-------------------------s3_5---------------------------------------!$
atom: s3_5
init: IDLE
ports: 
IDLE, START, enable_HK
START, END, cdms
START, END, pl
START, END, eps
START, END, com
END, START, internal
START, IDLE, finish
end

$!-------------------------s3_6---------------------------------------!$
atom: s3_6
init: IDLE
ports: 
IDLE, START, disable_HK
START, END, cdms
START, END, pl
START, END, eps
START, END, com
END, START, internal
START, IDLE, finish
end

$!-------------------------s15_1---------------------------------------!$
atom: s15_1
init: IDLE
ports: 
IDLE, START, enable_PS
START, END, cdms
START, END, pl
START, END, eps
START, END, com
END, START, internal
START, IDLE, finish
end

$!-------------------------s15_2---------------------------------------!$
atom: s15_2
init: IDLE
ports: 
IDLE, START, disable_PS
START, END, cdms
START, END, pl
START, END, eps
START, END, com
END, START, internal
START, IDLE, finish
end

$!-------------------------HK_EPS_processActionFlowWithAbort---------------------------------------!$
atom: HK_EPS_processActionFlowWithAbort
data: timer, period
init: WAIT
initAct: timer=0; period=-1;
ports: 
WAIT, START, read_HK, (period==-1 || timer == period ) /* to increase the timer we need timer ports */
START, I2C, I2C_ask_EPS
I2C, SEND_HK_REPORT, I2C_res_EPS
I2C, WAIT, I2C_fail_EPS
SEND_HK_REPORT, ASK, ask
ASK, WAIT, mem_res
ASK, WAIT, I2C_res_TTC
end

$!-------------------------HK_EPS_FailureMonitoring---------------------------------------!$
atom: HK_EPS_FailureMonitoring
data: timer, max_timer
initAct: timer=0; max_timer=-1;
init: NOMINAL
ports: 
NOMINAL, ANOMALY, failure
ANOMALY, CRITICAL_FAILURE, I2C_ask_EPS, (max_timer==-1 || timer > max_timer )
ANOMALY, NOMINAL, success, (max_timer==-1 || timer > max_timer )
CRITICAL_FAILURE, NOMINAL, I2C_res_EPS
end

$!-------------------------HK_EPS_PacketStoreModeManager---------------------------------------!$
atom: HK_EPS_PacketStoreModeManager
init: MEMORY
ports: 
MEMORY, TTC, disable
MEMORY, MEMORY, mem_write_req
TTC, TTC, ask_I2C_TTC
TTC, MEMORY, enable
end

$!-------------------------HK_EPS_ModeManager---------------------------------------!$
atom: HK_EPS_ModeManager
init: ENABLED
ports: 
ENABLED, DISABLED, disable
ENABLED, ENABLED, read_HK
DISABLED, ENABLED, enable
end

$!-------------------------HK_COM_processActionFlowWithAbort---------------------------------------!$
atom: HK_COM_processActionFlowWithAbort
data: timer, period
init: WAIT
initAct: timer=0; period=-1;
ports: 
WAIT, START, read_HK, (period==-1 || timer == period ) /* to increase the timer we need timer ports */
START, I2C, I2C_ask_COM
I2C, SEND_HK_REPORT, I2C_res_COM
I2C, WAIT, I2C_fail_COM
SEND_HK_REPORT, ASK, ask
ASK, WAIT, mem_res
ASK, WAIT, I2C_res_TTC
end

$!-------------------------HK_COM_FailureMonitoring---------------------------------------!$
atom: HK_COM_FailureMonitoring
data: timer, max_timer
initAct: timer=0; max_timer=-1;
init: NOMINAL
ports: 
NOMINAL, ANOMALY, failure
ANOMALY, CRITICAL_FAILURE, I2C_ask_COM, (max_timer==-1 || timer > max_timer )
ANOMALY, NOMINAL, success, (max_timer==-1 || timer > max_timer )
CRITICAL_FAILURE, NOMINAL, I2C_res_COM
end

$!-------------------------HK_COM_PacketStoreModeManager---------------------------------------!$
atom: HK_COM_PacketStoreModeManager
init: MEMORY
ports: 
MEMORY, TTC, disable
MEMORY, MEMORY, mem_write_req
TTC, TTC, ask_I2C_TTC
TTC, MEMORY, enable
end

$!-------------------------HK_COM_ModeManager---------------------------------------!$
atom: HK_COM_ModeManager
init: ENABLED
ports: 
ENABLED, DISABLED, disable
ENABLED, ENABLED, read_HK
DISABLED, ENABLED, enable
end

$!-------------------------HK_CDMS_processActionFlowWithAbort---------------------------------------!$
atom: HK_CDMS_processActionFlowWithAbort
data: timer, period
initAct: timer=0; period=-1;
init: WAIT
ports: 
WAIT, SEND_HK_REPORT, read_HK, (period==-1 || timer == period ) /* to increase the timer we need timer ports */
SEND_HK_REPORT, ASK, ask
ASK, WAIT, mem_res
ASK, WAIT, I2C_res
end

$!-------------------------HK_CDMS_PacketStoreModeManager---------------------------------------!$
atom: HK_CDMS_PacketStoreModeManager
init: MEMORY
ports: 
MEMORY, SAT, disable
MEMORY, MEMORY, mem_write_req
SAT, SAT, I2C_ask_sat
SAT, MEMORY, enable
end

$!-------------------------HK_CDMS_ModeManager---------------------------------------!$
atom: HK_CDMS_ModeManager
init: ENABLED
ports: 
ENABLED, DISABLED, disable
ENABLED, ENABLED, read_HK
DISABLED, ENABLED, enable
end

$!-------------------------------mainModel---------------------------------!$
compound: CubETH
component: WatchdogReset, WATCHDOG
component: CdmsStatusActionFlow, CDMSSTATACTFL
component: MessageLibrary, MSGLIB
component: sMutex, s128_4_MUX
component: s128_4ActionFlowWithAbort, s128_4_ACTFLAB
component: sMutex, s128_1_MUX
component: s128_1ActionFlowWithAbort, s128_1_ACTFLAB
component: sMutex, s128_5_MUX
component: s128_5ActionFlowWithAbort, s128_5_ACTFLAB
component: sMutex, STAT_VER_MUX
component: statusVerificationActionFlowWithAbort, STAT_VER_ACTFLAB
component: plModeManager, PLMODMNG
component: data_transferActionFlowWithAbort, DATRANS_ACTFLAB
component: data_transferModeManager, DATRANS_MODMNG
component: I2C_satActionFlow, I2C_SAT_ACTFL
component: I2C_satActionFlowWithAbort, I2C_SAT_ACTFLAB
component: I2C_satModeManagement, I2C_SAT_MODMNG
component: I2C_satLibrary, I2C_SAT_LIB
component: Log, LOG
component: sMutex, LOG_MUX
component: sMutex, MEM_MUX
component: flash_memory_readActionFlowWithAbort, MEMRD_ACTFLAB
component: flash_memory_writeActionFlowWithAbort, MEMWR_ACTFLAB
component: flash_memory_readModeManager, MEMRD_MODMNG
component: flash_memory_writeModeManager, MEMWR_MODMNG
component: memory_library, MEMLIB
component: HK_PL_processActionFlowWithAbort, HKPL_ACTFLAB
component: sMutex, HKPL_MUX
component: HK_PL_FailureMonitoring, HKPL_FAILMON
component: HK_PL_PacketStoreModeManager, HKPL_PSMODMNG
component: HK_PL_ModeManager, HKPL_MODMNG
component: HK_EPS_processActionFlowWithAbort, HKEPS_ACTFLAB
component: sMutex, HKEPS_MUX
component: HK_EPS_FailureMonitoring, HKEPS_FAILMON
component: HK_EPS_PacketStoreModeManager, HKEPS_PSMODMNG
component: HK_EPS_ModeManager, HKEPS_MODMNG
component: HK_COM_processActionFlowWithAbort, HKCOM_ACTFLAB
component: sMutex, HKCOM_MUX
component: HK_COM_FailureMonitoring, HKCOM_FAILMON
component: HK_COM_PacketStoreModeManager, HKCOM_PSMODMNG
component: HK_COM_ModeManager, HKCOM_MODMNG
component: HK_CDMS_processActionFlowWithAbort, HKCDMS_ACTFLAB
component: sMutex, HKCDMS_MUX
component: HK_CDMS_PacketStoreModeManager, HKCDMS_PSMODMNG
component: HK_CDMS_ModeManager, HKCDMS_MODMNG
component: s3_5, S3_5
component: s3_6, S3_6
component: s15_1, S15_1
component: s15_2, S15_2
connectors: 

/******** cdms_status ***********/
RDV2,internal_watchdog,, WATCHDOG.internal_watchdog,CDMSSTATACTFL.start_reset
RDV2,reset_done,, CDMSSTATACTFL.done_reset, WATCHDOG.done
$! RDV2,I2C_res,, CDMSSTATACTFL.I2C_res, MSGLIB.decodeMessage !$
/* TODO: add in .smv file : HKPL_I2C_res4 > ..3, 2, 1 & 2 > 1, 3 > 1 */
RDV5, cdms_I2C_res4,, CDMSSTATACTFL.I2C_res, MSGLIB.decodeMessage, I2C_SAT_ACTFL.return,  I2C_SAT_ACTFLAB.return, I2C_SAT_MODMNG.return
RDV4, cdms_I2C_res3,, CDMSSTATACTFL.I2C_res, MSGLIB.decodeMessage, I2C_SAT_ACTFL.return,  I2C_SAT_ACTFLAB.return

RDV5, cdms_I2C_res_error2  , ,CDMSSTATACTFL.I2C_res, MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.error2, LOG.log, LOG_MUX.take
RDV5, cdms_I2C_res_error3  , ,CDMSSTATACTFL.I2C_res, MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.error3, LOG.log, LOG_MUX.take
RDV3, cdms_I2C_ask ,, CDMSSTATACTFL.I2C_ask, MSGLIB.composeMessage, I2C_SAT_ACTFLAB.request

RDV2,done,, CDMSSTATACTFL.done_reset, WATCHDOG.done

/******** s_128_4 ***********/
RDV2, s128_4_fail, , s128_4_MUX.release, s128_4_ACTFLAB.fail
RDV2, s128_4_wrong_state, , s128_4_MUX.release, s128_4_ACTFLAB.wrong_state
RDV2, s128_4_takeTC, , s128_4_MUX.take, s128_4_ACTFLAB.tc128_4
RDV2, s128_4_exec, , s128_4_ACTFLAB.exec, PLMODMNG.exec
/* TODO: add in .smv file : s128_4_success2 > s128_4_success1 */
RDV2, s128_4_success1, , s128_4_MUX.release, s128_4_ACTFLAB.executed
RDV3, s128_4_success2, , s128_4_MUX.release, s128_4_ACTFLAB.executed, PLMODMNG.to_started

RDV3, s128_4_I2C_ask, , s128_4_ACTFLAB.I2C_ask, MSGLIB.composeMessage, I2C_SAT_ACTFLAB.request
RDV2, s128_4_I2C_res, , s128_4_ACTFLAB.I2C_res, MSGLIB.decodeMessage
RDV6, s128_4_I2C_fail_error2, , s128_4_MUX.release, s128_4_ACTFLAB.I2C_fail, MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.error2, LOG.log, LOG_MUX.take
RDV6, s128_4_I2C_fail_error3, , s128_4_MUX.release, s128_4_ACTFLAB.I2C_fail, MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.error3, LOG.log, LOG_MUX.take

/******** s_128_1 ***********/
RDV2, s128_1_fail, , s128_1_MUX.release, s128_1_ACTFLAB.fail
RDV2, s128_1_wrong_state, , s128_1_MUX.release, s128_1_ACTFLAB.wrong_state
RDV2, s128_1_takeTC, , s128_1_MUX.take, s128_1_ACTFLAB.tc128_1
RDV2, s128_1_load, , s128_1_ACTFLAB.load, PLMODMNG.load
/* TODO: add in .smv file : s128_4_success2 > s128_4_success1 */
RDV2, s128_1_success1, , s128_1_MUX.release, s128_1_ACTFLAB.loaded
RDV3, s128_1_success2, , s128_1_MUX.release, s128_1_ACTFLAB.loaded, PLMODMNG.to_scenario_ready

RDV3, s128_1_I2C_ask, , s128_1_ACTFLAB.I2C_ask, MSGLIB.composeMessage, I2C_SAT_ACTFLAB.request
RDV2, s128_1_I2C_res, , s128_1_ACTFLAB.I2C_res, MSGLIB.decodeMessage
RDV6, s128_1_I2C_fail_error2, , s128_1_MUX.release, s128_1_ACTFLAB.I2C_fail, MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.error2, LOG.log, LOG_MUX.take
RDV6, s128_1_I2C_fail_error3, , s128_1_MUX.release, s128_1_ACTFLAB.I2C_fail, MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.error3, LOG.log, LOG_MUX.take

/******** s_128_5 ***********/
RDV2, s128_5_fail, , s128_5_MUX.release, s128_5_ACTFLAB.fail
/* TODO: add in .smv file : s128_5_aborted2 > s128_5_aborted1 */
RDV2, s128_5_aborted1, , s128_5_MUX.release, s128_5_ACTFLAB.aborted
RDV3, s128_5_aborted2, , s128_5_MUX.release, s128_5_ACTFLAB.aborted, PLMODMNG.to_idle 
RDV2, s128_5_takeTC, , s128_5_MUX.take, s128_5_ACTFLAB.tc128_5

RDV3, s128_5_I2C_ask, , s128_5_ACTFLAB.I2C_ask, MSGLIB.composeMessage, I2C_SAT_ACTFLAB.request
RDV2, s128_5_I2C_res, , s128_5_ACTFLAB.I2C_res, MSGLIB.decodeMessage
RDV6, s128_5_I2C_fail_error2, , s128_5_MUX.release, s128_5_ACTFLAB.I2C_fail, MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.error2, LOG.log, LOG_MUX.take
RDV6, s128_5_I2C_fail_error3, , s128_5_MUX.release, s128_5_ACTFLAB.I2C_fail, MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.error3, LOG.log, LOG_MUX.take

/******** status verification ***********/
RDV3, status_verif_started , , STAT_VER_MUX.take, STAT_VER_ACTFLAB.started, PLMODMNG.started
/* TODO: add in .smv file : status_verif_result2 > status_verif_result1 */
RDV2, status_verif_result1 , , STAT_VER_MUX.release , STAT_VER_ACTFLAB.full
RDV3, status_verif_result2 , , STAT_VER_MUX.release , STAT_VER_ACTFLAB.full, PLMODMNG.to_result_ready

/* TODO: add in .smv file : status_verif_to_idle2 > status_verif_to_idle1 */
RDV2, status_verif_to_idle1 , , STAT_VER_MUX.release , STAT_VER_ACTFLAB.complete
RDV3, status_verif_to_idle2 , , STAT_VER_MUX.release , STAT_VER_ACTFLAB.complete, PLMODMNG.to_idle

RDV3, status_verif_I2C_ask, , STAT_VER_ACTFLAB.I2C_ask, MSGLIB.composeMessage, I2C_SAT_ACTFLAB.request
RDV2, status_verif_I2C_res, , STAT_VER_ACTFLAB.I2C_res, MSGLIB.decodeMessage
RDV5, status_verif_I2C_fail_error2, , STAT_VER_ACTFLAB.I2C_fail, MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.error2, LOG.log, LOG_MUX.take
RDV5, status_verif_I2C_fail_error3, , STAT_VER_ACTFLAB.I2C_fail, MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.error3, LOG.log, LOG_MUX.take

/******** data transfer ***********/

/* TODO: add in .smv file : payload_ready2 > 1 */
SINGLE, payload_ready1, ,PLMODMNG.ready
RDV2, payload_ready2, ,PLMODMNG.ready, DATRANS_MODMNG.to_busy

RDV2, data_transfer_start, ,DATRANS_ACTFLAB.start, DATRANS_MODMNG.contin
/* TODO: add in .smv file : data_transfer_done4 > ..3, 2, 1 & 2 > 1, 3 > 1 */
SINGLE, data_transfer_done1, ,DATRANS_ACTFLAB.done
RDV2, data_transfer_done2, ,DATRANS_ACTFLAB.done, DATRANS_MODMNG.to_idle
RDV2, data_transfer_done3, ,DATRANS_ACTFLAB.done, PLMODMNG.to_started
RDV3, data_transfer_done4, ,DATRANS_ACTFLAB.done, DATRANS_MODMNG.to_idle, PLMODMNG.to_started

RDV3, data_transfer_I2C_ask, , DATRANS_ACTFLAB.I2C_ask, MSGLIB.composeMessage, I2C_SAT_ACTFLAB.request
RDV2, data_transfer_I2C_res, , DATRANS_ACTFLAB.I2C_res, MSGLIB.decodeMessage
RDV5, data_transfer_I2C_fail_error2, , DATRANS_ACTFLAB.I2C_fail, MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.error2, LOG.log, LOG_MUX.take
RDV5, data_transfer_I2C_fail_error3, , DATRANS_ACTFLAB.I2C_fail, MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.error3, LOG.log, LOG_MUX.take

/* PL_to_MEM → write (Flash memory)  + setwrite (MEM_LIB) */
RDV4, data_transfer_ask_mem2, , DATRANS_ACTFLAB.ask_mem, MEM_MUX.take, MEMLIB.setWrite, MEMWR_MODMNG.write
RDV3, data_transfer_ask_mem1, , DATRANS_ACTFLAB.ask_mem, MEM_MUX.take, MEMLIB.setWrite
/* PL_to_MEM → ok_write (Flash memory)  */
RDV6, data_transfer_mem_res2, , DATRANS_ACTFLAB.mem_res, MEMWR_ACTFLAB.ok_write, LOG.log, LOG_MUX.take, MEM_MUX.release, MEMWR_MODMNG.done  
RDV5, data_transfer_mem_res1, , DATRANS_ACTFLAB.mem_res, MEMWR_ACTFLAB.ok_write, LOG.log, LOG_MUX.take, MEM_MUX.release
/******** I2C_sat ***********/
RDV3, I2C_sat_poll , , I2C_SAT_ACTFL.poll,  I2C_SAT_MODMNG.poll, I2C_SAT_LIB.masterRead
/* TODO: add in .smv file : I2C_send3 > 2, 1 */
RDV3, I2C_sat_send2 , , I2C_SAT_ACTFLAB.send,  I2C_SAT_LIB.masterWrite, I2C_SAT_MODMNG.send
RDV2, I2C_sat_send1 , , I2C_SAT_ACTFLAB.send,  I2C_SAT_LIB.masterWrite

RDV3, I2C_sat_error1 , , I2C_SAT_ACTFL.error1,  LOG.log, LOG_MUX.take

/******** logger ***********/
$! RDV2, log_take, , LOG_MUX.take, LOG.log !$
RDV2, log_release, , LOG_MUX.release, LOG.done

/******** flash memory ***********/
/* TODO: add in .smv file : flash_memory_read2 > 1 */
RDV3, flash_memory_setRead2, , MEM_MUX.take, MEMLIB.setRead, MEMRD_MODMNG.read
RDV2, flash_memory_setRead1, , MEM_MUX.take, MEMLIB.setRead
RDV2, flash_memory_read, , MEMRD_MODMNG.contin, MEMRD_ACTFLAB.read

/* TODO: add in .smv file : flash_memory_read_fail2 > flash_memory_read_fail1 */
RDV5, flash_memory_read_fail2, , MEMRD_ACTFLAB.fail, MEM_MUX.release, MEMRD_MODMNG.done. LOG.log, LOG_MUX.take
RDV4, flash_memory_read_fail1, , MEMRD_ACTFLAB.fail, MEM_MUX.release, LOG.log, LOG_MUX.take
/* TODO: add in .smv file : flash_memory_ok_read2 > flash_memory_ok_read1 */
RDV5, flash_memory_ok_read2, , MEMRD_ACTFLAB.ok_read, MEM_MUX.release, MEMRD_MODMNG.done LOG.log, LOG_MUX.take
RDV4, flash_memory_ok_read1, , MEMRD_ACTFLAB.ok_read, MEM_MUX.release, LOG.log, LOG_MUX.take 

RDV2, flash_memory_checkCRC, , MEMRD_ACTFLAB.check_CRC, MEMLIB.checkCRC
RDV3, flash_memory_bad_CRC , , MEMRD_ACTFLAB.bad_CRC, LOG.log , LOG_MUX.take

RDV2, flash_memory_write, , MEMWR_MODMNG.contin, MEMWR_ACTFLAB.write

$!/* TODO: add in .smv file : flash_memory_read2 > 1 */ !$
$!RDV3, flash_memory_setWrite2, , MEM_MUX.take, MEMLIB.setWrite, MEMWR_MODMNG.write!$
$!RDV2, flash_memory_setWrite1, , MEM_MUX.take, MEMLIB.setWrite!$
$!/* TODO: add in .smv file : flash_memory_write_fail2 > flash_memory_write_fail1 */!$
$!RDV5, flash_memory_write_fail2, , MEMWR_ACTFLAB.fail, LOG.log, LOG_MUX.take, MEM_MUX.release, MEMWR_MODMNG.done !$
$!RDV4, flash_memory_write_fail1, , MEMWR_ACTFLAB.fail, LOG.log, LOG_MUX.take, MEM_MUX.release !$
$!/* TODO: add in .smv file : flash_memory_ok_write2 > flash_memory_ok_write1 */ !$
$!RDV5, flash_memory_ok_write2, , MEMWR_ACTFLAB.ok_write, LOG.log, LOG_MUX.take, MEM_MUX.release, MEMWR_MODMNG.done !$ 
$!RDV4, flash_memory_ok_write1, , MEMWR_ACTFLAB.ok_write, LOG.log, LOG_MUX.take, MEM_MUX.release  !$



/******** HK_PL ***********/
RDV3, HKPL_read_HK, , HKPL_MUX.take, HKPL_ACTFLAB.read_HK, HKPL_MODMNG.read_HK
$! mem_res -> return, fail (flash Memory) !$
/* TODO: add in .smv file : HKPL_mem_res_fail2 > HKPL_mem_res_fail1 */
RDV8, HKPL_mem_res_fail2, , HKPL_MUX.release, HKPL_ACTFLAB.mem_res, HKPL_FAILMON.success, MEMWR_ACTFLAB.fail, LOG.log, LOG_MUX.take, MEM_MUX.release, MEMWR_MODMNG.done 
RDV7, HKPL_mem_res_fail1, , HKPL_MUX.release, HKPL_ACTFLAB.mem_res, HKPL_FAILMON.success, MEMWR_ACTFLAB.fail, LOG.log, LOG_MUX.take, MEM_MUX.release
/* TODO: add in .smv file : HKPL_mem_res_return2 > HKPL_mem_res_return1 */
RDV8, HKPL_mem_res_return2, , HKPL_MUX.release, HKPL_ACTFLAB.mem_res, HKPL_FAILMON.success, MEMWR_ACTFLAB.ok_write, LOG.log, LOG_MUX.take, MEM_MUX.release, MEMWR_MODMNG.done  
RDV7, HKPL_mem_res_return1, , HKPL_MUX.release, HKPL_ACTFLAB.mem_res, HKPL_FAILMON.success, MEMWR_ACTFLAB.ok_write, LOG.log, LOG_MUX.take, MEM_MUX.release
RDV3, HKPL_I2C_res_TTC, , HKPL_MUX.release, HKPL_ACTFLAB.I2C_res_TTC, HKPL_FAILMON.success

/* start: HK_to_I2C, MSG_LIB, I2C_SAT */
RDV3, HKPL_I2C_ask, , HKPL_ACTFLAB.I2C_ask_PL, MSGLIB.composeMessage, I2C_SAT_ACTFLAB.request
$! conn: RDV2, HKPL_I2C_res, , HKPL_ACTFLAB.I2C_res_PL, MSGLIB.decodeMessage !$
/* TODO: add in .smv file : HKPL_I2C_res4 > ..3, 2, 1 & 2 > 1, 3 > 1 */
RDV5, HKPL_I2C_res4, , HKPL_ACTFLAB.I2C_res_PL, MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.return,  I2C_SAT_ACTFL.return, I2C_SAT_MODMNG.return
RDV4, HKPL_I2C_res3, , HKPL_ACTFLAB.I2C_res_PL, MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.return,  I2C_SAT_ACTFL.return

RDV7, HKPL_I2C_fail_error2, , HKPL_ACTFLAB.I2C_fail_PL, HKPL_MUX.release ,HKPL_FAILMON.failure ,MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.error2, LOG.log, LOG_MUX.take
RDV7, HKPL_I2C_fail_error3, , HKPL_ACTFLAB.I2C_fail_PL, HKPL_MUX.release ,HKPL_FAILMON.failure ,MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.error3, LOG.log, LOG_MUX.take
/* end: HK_to_I2C, MSG_LIB, I2C_SAT */

/* start: HK_to_I2C_NOFAIL, I2C_SAT */
RDV2, HKPL_I2C_nofail_ask, , HKPL_FAILMON.I2C_ask_PL, I2C_SAT_ACTFLAB.request
/* TODO: add in .smv file : HKPL_I2C_res4 > ..3, 2, 1 & 2 > 1, 3 > 1 */
RDV4, HKPL_I2C_nofail_res4, , HKPL_FAILMON.I2C_res_PL,  I2C_SAT_ACTFLAB.return,  I2C_SAT_ACTFL.return, I2C_SAT_MODMNG.return
RDV3, HKPL_I2C_nofail_res3, , HKPL_FAILMON.I2C_res_PL, I2C_SAT_ACTFLAB.return,  I2C_SAT_ACTFL.return

RDV4, HKPL_I2C_nofail__error2, , HKPL_FAILMON.I2C_res_PL, I2C_SAT_ACTFLAB.error2, LOG.log, LOG_MUX.take
RDV4, HKPL_I2C_nofail__error3, , HKPL_FAILMON.I2C_res_PL, I2C_SAT_ACTFLAB.error3, LOG.log, LOG_MUX.take
/* end: HK_to_I2C_NOFAIL, I2C_SAT */


RDV2, HKPL_ask_I2C_TTC , , HKPL_ACTFLAB.ask, HKPL_PSMODMNG.ask_I2C_TTC
RDV5, HKPL_mem_write_req2, , HKPL_ACTFLAB.ask, HKPL_PSMODMNG.mem_write_req, MEM_MUX.take, MEMLIB.setWrite, MEMWR_MODMNG.write
RDV4, HKPL_mem_write_req1, , HKPL_ACTFLAB.ask, HKPL_PSMODMNG.mem_write_req, MEM_MUX.take, MEMLIB.setWrite


/* TODO for all: add in .smv file : ...pl2 > 1 */
SINGLE, s3_5_pl1, , S3_5.pl
RDV2, s3_5_pl2, , S3_5.pl, HKPL_MODMNG.enable
SINGLE, s3_6_pl1, , S3_6.pl
RDV2, s3_6_pl2, , S3_6.pl, HKPL_MODMNG.disable
SINGLE, s15_1_pl1, , S15_1.pl
RDV2, s15_1_pl2, , S15_1.pl, HKPL_PSMODMNG.enable
SINGLE, s15_2_pl1, , S15_2.pl
RDV2, s15_2_pl2, , S15_2.pl, HKPL_PSMODMNG.disable

/******** HK_EPS ***********/
RDV3, HKEPS_read_HK, , HKEPS_MUX.take, HKEPS_ACTFLAB.read_HK, HKEPS_MODMNG.read_HK
$! mem_res -> return, fail (flash Memory) !$
/* TODO: add in .smv file : HKEPS_mem_res_fail2 > HKEPS_mem_res_fail1 */
RDV8, HKEPS_mem_res_fail2, , HKEPS_MUX.release, HKEPS_ACTFLAB.mem_res, HKEPS_FAILMON.success, MEMWR_ACTFLAB.fail, LOG.log, LOG_MUX.take, MEM_MUX.release, MEMWR_MODMNG.done 
RDV7, HKEPS_mem_res_fail1, , HKEPS_MUX.release, HKEPS_ACTFLAB.mem_res, HKEPS_FAILMON.success, MEMWR_ACTFLAB.fail, LOG.log, LOG_MUX.take, MEM_MUX.release
/* TODO: add in .smv file : HKEPS_mem_res_return2 > HKEPS_mem_res_return1 */
RDV8, HKEPS_mem_res_return2, , HKEPS_MUX.release, HKEPS_ACTFLAB.mem_res, HKEPS_FAILMON.success, MEMWR_ACTFLAB.ok_write, LOG.log, LOG_MUX.take, MEM_MUX.release, MEMWR_MODMNG.done  
RDV7, HKEPS_mem_res_return1, , HKEPS_MUX.release, HKEPS_ACTFLAB.mem_res, HKEPS_FAILMON.success, MEMWR_ACTFLAB.ok_write, LOG.log, LOG_MUX.take, MEM_MUX.release 
RDV3, HKEPS_I2C_res_TTC, , HKEPS_MUX.release, HKEPS_ACTFLAB.I2C_res_TTC, HKEPS_FAILMON.success

/* start: HK_to_I2C, MSG_LIB, I2C_SAT */
RDV3, HKEPS_I2C_ask, , HKEPS_ACTFLAB.I2C_ask_EPS, MSGLIB.composeMessage, I2C_SAT_ACTFLAB.request
$! RDV2, HKEPS_I2C_res, , HKEPS_ACTFLAB.I2C_res_EPS, MSGLIB.decodeMessage !$
/* TODO: add in .smv file : HKEPS_I2C_res4 > ..3, 2, 1 & 2 > 1, 3 > 1 */
RDV5, HKEPS_I2C_res4, , HKEPS_ACTFLAB.I2C_res_EPS, MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.return,  I2C_SAT_ACTFL.return, I2C_SAT_MODMNG.return
RDV4, HKEPS_I2C_res3, , HKEPS_ACTFLAB.I2C_res_EPS, MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.return,  I2C_SAT_ACTFL.return

RDV7, HKEPS_I2C_fail_error2, , HKEPS_ACTFLAB.I2C_fail_EPS, HKEPS_MUX.release ,HKEPS_FAILMON.failure ,MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.error2, LOG.log, LOG_MUX.take
RDV7, HKEPS_I2C_fail_error3, , HKEPS_ACTFLAB.I2C_fail_EPS, HKEPS_MUX.release ,HKEPS_FAILMON.failure ,MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.error3, LOG.log, LOG_MUX.take
/* end: HK_to_I2C, MSG_LIB, I2C_SAT */

/* start: HK_to_I2C_NOFAIL, I2C_SAT */
RDV2, HKEPS_I2C_nofail_ask, , HKEPS_FAILMON.I2C_ask_EPS, I2C_SAT_ACTFLAB.request
/* TODO: add in .smv file : HKEPS_I2C_res4 > ..3, 2, 1 & 2 > 1, 3 > 1 */
RDV4, HKEPS_I2C_nofail_res4, , HKEPS_FAILMON.I2C_res_EPS,  I2C_SAT_ACTFLAB.return,  I2C_SAT_ACTFL.return, I2C_SAT_MODMNG.return
RDV3, HKEPS_I2C_nofail_res3, , HKEPS_FAILMON.I2C_res_EPS, I2C_SAT_ACTFLAB.return,  I2C_SAT_ACTFL.return

RDV4, HKEPS_I2C_nofail_error2, , HKEPS_FAILMON.I2C_res_EPS, I2C_SAT_ACTFLAB.error2, LOG.log, LOG_MUX.take
RDV4, HKEPS_I2C_nofail_error3, , HKEPS_FAILMON.I2C_res_EPS, I2C_SAT_ACTFLAB.error3, LOG.log, LOG_MUX.take
/* end: HK_to_I2C_NOFAIL, I2C_SAT */


RDV2, HKEPS_ask_I2C_TTC , , HKEPS_ACTFLAB.ask, HKEPS_PSMODMNG.ask_I2C_TTC
$! HKEPS_mem_write_req2 > HKEPS_mem_write_req1 !$
RDV5, HKEPS_mem_write_req2, , HKEPS_ACTFLAB.ask, HKEPS_PSMODMNG.mem_write_req, MEM_MUX.take, MEMLIB.setWrite, MEMWR_MODMNG.write
RDV4, HKEPS_mem_write_req1, , HKEPS_ACTFLAB.ask, HKEPS_PSMODMNG.mem_write_req, MEM_MUX.take, MEMLIB.setWrite

/* TODO for all: add in .smv file : ...eps2 > 1 */
SINGLE, s3_5_eps1, , S3_5.eps
RDV2, s3_5_eps2, , S3_5.eps, HKEPS_MODMNG.enable
SINGLE, s3_6_eps1, , S3_6.eps
RDV2, s3_6_eps2, , S3_6.eps, HKEPS_MODMNG.disable
SINGLE, s15_1_eps1, , S15_1.eps
RDV2, s15_1_eps2, , S15_1.eps, HKEPS_PSMODMNG.enable
SINGLE, s15_2_eps1, , S15_2.eps
RDV2, s15_2_eps2, , S15_2.eps, HKEPS_PSMODMNG.disable

/******** HK_COM ***********/
RDV3, HKCOM_read_HK, , HKCOM_MUX.take, HKCOM_ACTFLAB.read_HK, HKCOM_MODMNG.read_HK
$! mem_res -> flash_mem fail, return !$
/* TODO: add in .smv file : HKCOM_mem_res_fail2 > HKCOM_mem_res_fail1 */
RDV8, HKCOM_mem_res_fail2, , HKCOM_MUX.release, HKCOM_ACTFLAB.mem_res, HKCOM_FAILMON.success, MEMWR_ACTFLAB.fail, LOG.log, LOG_MUX.take, MEM_MUX.release, MEMWR_MODMNG.done 
RDV7, HKCOM_mem_res_fail1, , HKCOM_MUX.release, HKCOM_ACTFLAB.mem_res, HKCOM_FAILMON.success, MEMWR_ACTFLAB.fail, LOG.log, LOG_MUX.take, MEM_MUX.release

/* TODO: add in .smv file : HKCOM_mem_res_return2 > HKCOM_mem_res_return1 */
RDV8, HKCOM_mem_res_return2, , HKCOM_MUX.release, HKCOM_ACTFLAB.mem_res, HKCOM_FAILMON.success, MEMWR_ACTFLAB.ok_write, LOG.log, LOG_MUX.take, MEM_MUX.release, MEMWR_MODMNG.done  
RDV7, HKCOM_mem_res_return1, , HKCOM_MUX.release, HKCOM_ACTFLAB.mem_res, HKCOM_FAILMON.success, MEMWR_ACTFLAB.ok_write, LOG.log, LOG_MUX.take, MEM_MUX.release 
RDV3, HKCOM_I2C_res_TTC, , HKCOM_MUX.release, HKCOM_ACTFLAB.I2C_res_TTC, HKCOM_FAILMON.success

/* start: HK_to_I2C, MSG_LIB, I2C_SAT */
RDV3, HKCOM_I2C_ask, , HKCOM_ACTFLAB.I2C_ask_COM, MSGLIB.composeMessage, I2C_SAT_ACTFLAB.request
$! RDV2, HKCOM_I2C_res, , HKCOM_ACTFLAB.I2C_res_COM, MSGLIB.decodeMessage !$
/* TODO: add in .smv file : HKCOM_I2C_res4 > ..3, 2, 1 & 2 > 1, 3 > 1 */
RDV5, HKCOM_I2C_res4, , HKCOM_ACTFLAB.I2C_res_COM, MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.return,  I2C_SAT_ACTFL.return, I2C_SAT_MODMNG.return
RDV4, HKCOM_I2C_res3, , HKCOM_ACTFLAB.I2C_res_COM, MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.return,  I2C_SAT_ACTFL.return

RDV7, HKCOM_I2C_fail_error2, , HKCOM_ACTFLAB.I2C_fail_COM, HKCOM_MUX.release ,HKCOM_FAILMON.failure ,MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.error2, LOG.log, LOG_MUX.take
RDV7, HKCOM_I2C_fail_error3, , HKCOM_ACTFLAB.I2C_fail_COM, HKCOM_MUX.release ,HKCOM_FAILMON.failure ,MSGLIB.decodeMessage, I2C_SAT_ACTFLAB.error3, LOG.log, LOG_MUX.take
/* end: HK_to_I2C, MSG_LIB, I2C_SAT */

/* start: HK_to_I2C_NOFAIL, I2C_SAT */
RDV2, HKCOM_I2C_nofail_ask, , HKCOM_FAILMON.I2C_ask_COM, I2C_SAT_ACTFLAB.request
/* TODO: add in .smv file : HKCOM_I2C_res4 > ..3, 2, 1 & 2 > 1, 3 > 1 */
RDV4, HKCOM_I2C_nofail_res4, , HKCOM_FAILMON.I2C_res_COM,  I2C_SAT_ACTFLAB.return,  I2C_SAT_ACTFL.return, I2C_SAT_MODMNG.return
RDV3, HKCOM_I2C_nofail_res3, , HKCOM_FAILMON.I2C_res_COM, I2C_SAT_ACTFLAB.return,  I2C_SAT_ACTFL.return

RDV4, HKCOM_I2C_nofail__error2, , HKCOM_FAILMON.I2C_res_COM, I2C_SAT_ACTFLAB.error2, LOG.log, LOG_MUX.take
RDV4, HKCOM_I2C_nofail__error3, , HKCOM_FAILMON.I2C_res_COM, I2C_SAT_ACTFLAB.error3, LOG.log, LOG_MUX.take
/* end: HK_to_I2C_NOFAIL, I2C_SAT */


RDV2, HKCOM_ask_I2C_TTC , , HKCOM_ACTFLAB.ask, HKCOM_PSMODMNG.ask_I2C_TTC
/* HKCOM_mem_write_req2> HKCOM_mem_write_req1  */
RDV5, HKCOM_mem_write_req2, , HKCOM_ACTFLAB.ask, HKCOM_PSMODMNG.mem_write_req, MEM_MUX.take, MEMLIB.setWrite, MEMWR_MODMNG.write
RDV4, HKCOM_mem_write_req1, , HKCOM_ACTFLAB.ask, HKCOM_PSMODMNG.mem_write_req, MEM_MUX.take, MEMLIB.setWrite

/* TODO for all: add in .smv file : ...com2 > 1 */
SINGLE, s3_5_com1, , S3_5.com
RDV2, s3_5_com2, , S3_5.com, HKCOM_MODMNG.enable
SINGLE, s3_6_com1, , S3_6.com
RDV2, s3_6_com2, , S3_6.com, HKCOM_MODMNG.disable
SINGLE, s15_1_com1, , S15_1.com
RDV2, s15_1_com2, , S15_1.com, HKCOM_PSMODMNG.enable
SINGLE, s15_2_com1, , S15_2.com
RDV2, s15_2_com2, , S15_2.com, HKCOM_PSMODMNG.disable

/******** HK_CDMS ***********/
RDV3, HKCDMS_read_HK, , HKCDMS_MUX.take, HKCDMS_ACTFLAB.read_HK, HKCDMS_MODMNG.read_HK
$! mem_res -> flash_mem fail, return !$
/* TODO: add in .smv file : HKCDMS_mem_res_fail2 > HKCDMS_mem_res_fail1 */
RDV7, HKCDMS_mem_res_fail2, , HKCDMS_MUX.release, HKCDMS_ACTFLAB.mem_res,  MEMWR_ACTFLAB.fail, MEM_MUX.release, MEMWR_MODMNG.done , LOG.log, LOG_MUX.take 
RDV6, HKCDMS_mem_res_fail1, , HKCDMS_MUX.release, HKCDMS_ACTFLAB.mem_res, MEMWR_ACTFLAB.fail, MEM_MUX.release, LOG.log, LOG_MUX.take

/* TODO: add in .smv file : HKCDMS_mem_res_return2 > HKCDMS_mem_res_return1 */
RDV7, HKCDMS_mem_res_return2, , HKCDMS_MUX.release, HKCDMS_ACTFLAB.mem_res, MEMWR_ACTFLAB.ok_write, MEM_MUX.release, MEMWR_MODMNG.done, LOG.log, LOG_MUX.take,  
RDV6, HKCDMS_mem_res_return1, , HKCDMS_MUX.release, HKCDMS_ACTFLAB.mem_res, MEMWR_ACTFLAB.ok_write, MEM_MUX.release, LOG.log, LOG_MUX.take

RDV3, HKCDMS_I2C_res, , HKCDMS_MUX.release, HKCDMS_ACTFLAB.I2C_res, MSGLIB.decodeMessage

RDV3, HKCDMS_ask_sat, , HKCDMS_ACTFLAB.ask, HKCDMS_PSMODMNG.I2C_ask_sat, MSGLIB.composeMessage
/* HKCDMS_mem_write_req2> HKCDMS_mem_write_req1  */
RDV5, HKCDMS_mem_write_req2, , HKCDMS_ACTFLAB.ask, HKCDMS_PSMODMNG.mem_write_req, MEM_MUX.take, MEMLIB.setWrite, MEMWR_MODMNG.write
RDV4, HKCDMS_mem_write_req1, , HKCDMS_ACTFLAB.ask, HKCDMS_PSMODMNG.mem_write_req, MEM_MUX.take, MEMLIB.setWrite

/* TODO for all: add in .smv file : ...cdms2 > 1 */
SINGLE, s3_5_cdms1, , S3_5.cdms
RDV2, s3_5_cdms2, , S3_5.cdms, HKCDMS_MODMNG.enable
SINGLE, s3_6_cdms1, , S3_6.cdms
RDV2, s3_6_cdms2, , S3_6.cdms, HKCDMS_MODMNG.disable
SINGLE, s15_1_cdms1, , S15_1.cdms
RDV2, s15_1_cdms2, , S15_1.cdms, HKCDMS_PSMODMNG.enable
SINGLE, s15_2_cdms1, , S15_2.cdms
RDV2, s15_2_cdms2, , S15_2.cdms, HKCDMS_PSMODMNG.disable

end

