model CUBETH_bipModel

	port type syncPort
	


connector type SINGLE(syncPort p1)
define p1
end


connector type RDV2(syncPort p1, syncPort p2)
define p1 p2
end	

connector type RDV3(syncPort p1, syncPort p2, syncPort p3)
define p1 p2 p3
end	

connector type RDV4(syncPort p1, syncPort p2, syncPort p3, syncPort p4)
define p1 p2 p3 p4
end	

connector type RDV5(syncPort p1, syncPort p2, syncPort p3, syncPort p4, syncPort p5)
define p1 p2 p3 p4 p5
end	

connector type RDV6(syncPort p1, syncPort p2, syncPort p3, syncPort p4, syncPort p5, syncPort p6)
define p1 p2 p3 p4 p5 p6
end	

connector type RDV7(syncPort p1, syncPort p2, syncPort p3, syncPort p4, syncPort p5, syncPort p6, syncPort p7)
define p1 p2 p3 p4 p5 p6 p7
end	

connector type RDV8(syncPort p1, syncPort p2, syncPort p3, syncPort p4, syncPort p5, syncPort p6, syncPort p7, syncPort p8)
define p1 p2 p3 p4 p5 p6 p7 p8
end	

 /* Part of the CDMS_status. There is an implementation for the CDSM_STATUS component and there are timing ports there. */ 
 
atomic type WatchdogReset

 
data int  timer  
   
	export port  syncPort  internal_watchdog     
	export port  syncPort  done   
 
	place S0 ,S1 

initial to  S0 do{  
	timer=0;  }

 on internal_watchdog from S0 to S1   do{
  timer = 0;  }  
 on done from S1 to S0   


end

 
atomic type CdmsStatusActionFlow

   
	export port  syncPort  I2C_ask     
	export port  syncPort  done_reset     
	export port  syncPort  start     
	export port  syncPort  finish     
	export port  syncPort  I2C_res     
	export port  syncPort  start_reset   
 
	place ASKED ,NOMINAL ,START ,RESET ,HEARTBEAT ,RESULT 

initial to  NOMINAL do{  }

 on start from NOMINAL to START   
 on start_reset from START to RESET   
 on done_reset from RESET to HEARTBEAT   
 on I2C_ask from HEARTBEAT to ASKED   
 on I2C_res from ASKED to RESULT   
 on finish from RESULT to NOMINAL   


end

 
atomic type MessageLibrary

   
	export port  syncPort  composeMessage     
	export port  syncPort  decodeMessage   
 
	place S0 

initial to  S0 do{  }

 on decodeMessage from S0 to S0   
 on composeMessage from S0 to S0   


end

 
atomic type sMutex

   
	export port  syncPort  take     
	export port  syncPort  release   
 
	place IDLE ,BUSY 

initial to  IDLE do{  }

 on take from IDLE to BUSY   
 on release from BUSY to IDLE   


end

 /* Part of the s128_4 */ 
 
atomic type s128_4ActionFlowWithAbort

   
	export port  syncPort  tc128_4     
	export port  syncPort  fail     
	export port  syncPort  I2C_ask     
	export port  syncPort  wrong_state     
	export port  syncPort  start     
	export port  syncPort  executed     
	export port  syncPort  I2C_res     
	export port  syncPort  exec     
	export port  syncPort  I2C_fail   
 
	place IDLE ,BUSY ,VALIDATE ,START ,END ,I2C 

initial to  IDLE do{  }

 on start from IDLE to BUSY   
 on tc128_4 from BUSY to VALIDATE   
 on exec from VALIDATE to START   
 on wrong_state from VALIDATE to IDLE   
 on I2C_ask from START to I2C   
 on I2C_fail from I2C to IDLE   
 on I2C_res from I2C to END   
 on executed from END to IDLE   
 on fail from END to IDLE   


end

 /* Part of the s128_1 */ 
 
atomic type s128_1ActionFlowWithAbort

   
	export port  syncPort  loaded     
	export port  syncPort  fail     
	export port  syncPort  I2C_ask     
	export port  syncPort  load     
	export port  syncPort  tc128_1     
	export port  syncPort  wrong_state     
	export port  syncPort  start     
	export port  syncPort  I2C_res     
	export port  syncPort  I2C_fail   
 
	place IDLE ,BUSY ,VALIDATE ,START ,END ,I2C 

initial to  IDLE do{  }

 on start from IDLE to BUSY   
 on tc128_1 from BUSY to VALIDATE   
 on load from VALIDATE to START   
 on wrong_state from VALIDATE to IDLE   
 on I2C_ask from START to I2C   
 on I2C_fail from I2C to IDLE   
 on I2C_res from I2C to END   
 on loaded from END to IDLE   
 on fail from END to IDLE   


end

 /* Part of the s128_5 */ 
 
atomic type s128_5ActionFlowWithAbort

   
	export port  syncPort  fail     
	export port  syncPort  tc128_5     
	export port  syncPort  I2C_ask     
	export port  syncPort  aborted     
	export port  syncPort  I2C_res     
	export port  syncPort  I2C_fail   
 
	place IDLE ,START ,END ,I2C 

initial to  IDLE do{  }

 on tc128_5 from IDLE to START   
 on I2C_ask from START to I2C   
 on I2C_fail from I2C to IDLE   
 on I2C_res from I2C to END   
 on aborted from END to IDLE   
 on fail from END to IDLE   


end

 /* Part of the status_verification */ 
 
atomic type statusVerificationActionFlowWithAbort

   
	export port  syncPort  I2C_ask     
	export port  syncPort  started     
	export port  syncPort  complete     
	export port  syncPort  I2C_res     
	export port  syncPort  I2C_fail     
	export port  syncPort  full   
 
	place CHECK_STATUS ,IDLE ,END ,I2C 

initial to  IDLE do{  }

 on started from IDLE to CHECK_STATUS   
 on I2C_ask from CHECK_STATUS to I2C   
 on I2C_fail from I2C to IDLE   
 on I2C_res from I2C to END   
 on complete from END to IDLE   
 on full from END to IDLE   


end

 
atomic type plModeManager

   
	export port  syncPort  to_idle     
	export port  syncPort  to_result_ready     
	export port  syncPort  to_scenario_ready     
	export port  syncPort  to_started     
	export port  syncPort  load     
	export port  syncPort  ready     
	export port  syncPort  started     
	export port  syncPort  exec   
 
	place SCENARIO_READY ,IDLE ,STARTED ,RESULT_READY 

initial to  IDLE do{  }

 on load from IDLE to IDLE   
 on to_scenario_ready from IDLE to SCENARIO_READY   
 on exec from SCENARIO_READY to SCENARIO_READY   
 on to_idle from SCENARIO_READY to IDLE   
 on to_started from SCENARIO_READY to STARTED   
 on started from STARTED to STARTED   
 on to_idle from STARTED to IDLE   
 on to_result_ready from STARTED to RESULT_READY   
 on to_started from RESULT_READY to STARTED   
 on ready from RESULT_READY to RESULT_READY   
 on to_idle from RESULT_READY to IDLE   


end

 
atomic type data_transferActionFlowWithAbort

 
data int  finish  
   
	export port  syncPort  I2C_ask     
	export port  syncPort  ask_mem     
	export port  syncPort  start     
	export port  syncPort  mem_res     
	export port  syncPort  I2C_res     
	export port  syncPort  done     
	export port  syncPort  not_done     
	export port  syncPort  I2C_fail   
 
	place ACQUIRE ,MEM ,IDLE ,END ,I2C ,SAVE 

initial to  IDLE do{  
	finish=0;  }

 on start from IDLE to ACQUIRE   
 on I2C_ask from ACQUIRE to I2C   
 on I2C_fail from I2C to IDLE   
 on I2C_res from I2C to SAVE   
 on ask_mem from SAVE to MEM   
 on mem_res from MEM to END   do{
  finish=-1; /* finished=-1, as long as it is non-deterministically assigned */  }  
 on done from END to IDLE  provided( (finish==-1 || finish==1) )   
 on not_done from END to IDLE  provided( (finish==-1 || finish==0) )   


end

 
atomic type data_transferModeManager

   
	export port  syncPort  to_idle     
	export port  syncPort  to_busy     
	export port  syncPort  contin   
 
	place IDLE ,BUSY 

initial to  IDLE do{  }

 on to_busy from IDLE to BUSY   
 on to_idle from BUSY to IDLE   
 on contin from BUSY to BUSY   


end

 
atomic type I2C_satActionFlow

 
data int  no_msg ,bad_crc  
   
	export port  syncPort  poll     
	export port  syncPort  no_message     
	export port  syncPort  error1     
	export port  syncPort  return   
 
	place READ ,VERIFY 

initial to  READ do{  
	no_msg=0; bad_crc=0;  }

 on poll from READ to VERIFY   do{
  no_msg=-1; bad_crc=-1; /* -1 for nDeterminism */  }  
 on no_message from VERIFY to READ  provided( (no_msg==-1 || no_msg==1) )   
 on return from VERIFY to READ  provided( (no_msg==-1 || bad_crc ==-1 || ( no_msg==0 &&  bad_crc==0) ) )   
 on error1 from VERIFY to READ  provided( (bad_crc==-1 || bad_crc==1) )   


end

 
atomic type I2C_satActionFlowWithAbort

 
data int  max_poll ,count_poll ,max_write ,count_write  
   
	export port  syncPort  request     
	export port  syncPort  send     
	export port  syncPort  error3     
	export port  syncPort  return     
	export port  syncPort  error2   
 
	place READ ,IDLE ,WRITE 

initial to  IDLE do{  
	max_write=2; max_poll=2; count_poll=0; count_write=0;  }

 on request from IDLE to WRITE   
 on send from WRITE to READ  provided( (max_write==-1 || count_write<max_write ) )   do{
  count_write = count_write+1;  }  
 on error3 from WRITE to IDLE  provided( (max_write==-1 || count_write==max_write ) )   do{
  count_write = 0;  }  
 on return from READ to IDLE  provided( (max_poll==-1 || count_poll<max_poll ) )   do{
  count_poll = count_poll+1;  }  
 on error2 from READ to IDLE  provided( (max_poll==-1 || count_poll==max_poll ) )   do{
  count_poll = 0;  }  


end

 
atomic type I2C_satModeManagement

   
	export port  syncPort  poll     
	export port  syncPort  send     
	export port  syncPort  return   
 
	place S0 ,S1 

initial to  S0 do{  }

 on send from S0 to S1   
 on poll from S1 to S1   
 on return from S1 to S0   


end

 
atomic type I2C_satLibrary

   
	export port  syncPort  masterWrite     
	export port  syncPort  masterRead   
 
	place S0 

initial to  S0 do{  }

 on masterWrite from S0 to S0   
 on masterRead from S0 to S0   


end

 
atomic type Log

   
	export port  syncPort  log     
	export port  syncPort  done   
 
	place IDLE 

initial to  IDLE do{  }

 on log from IDLE to IDLE   
 on done from IDLE to IDLE   


end

 
atomic type flash_memory_readModeManager

   
	export port  syncPort  read     
	export port  syncPort  contin     
	export port  syncPort  done   
 
	place READ ,IDLE 

initial to  IDLE do{  }

 on read from IDLE to READ   
 on done from READ to IDLE   
 on contin from READ to READ   


end

 
atomic type flash_memory_writeModeManager

   
	export port  syncPort  contin     
	export port  syncPort  write     
	export port  syncPort  done   
 
	place READ ,IDLE 

initial to  IDLE do{  }

 on write from IDLE to READ   
 on done from READ to IDLE   
 on contin from READ to READ   


end

 
atomic type flash_memory_readActionFlowWithAbort

   
	export port  syncPort  fail     
	export port  syncPort  read     
	export port  syncPort  ok_read     
	export port  syncPort  finish     
	export port  syncPort  check_CRC     
	export port  syncPort  bad_CRC   
 
	place READ_BUFFER ,DONE ,CRC ,STATUS_READ ,IDLE 

initial to  READ_BUFFER do{  }

 on read from READ_BUFFER to CRC   
 on check_CRC from CRC to STATUS_READ   
 on bad_CRC from STATUS_READ to READ_BUFFER   
 on fail from STATUS_READ to READ_BUFFER   
 on ok_read from STATUS_READ to DONE   
 on finish from DONE to IDLE   


end

 
atomic type flash_memory_writeActionFlowWithAbort

   
	export port  syncPort  fail     
	export port  syncPort  wait     
	export port  syncPort  ok_write     
	export port  syncPort  contin     
	export port  syncPort  finish     
	export port  syncPort  write   
 
	place STATUS_WRITE ,DONE ,WRITE_BUFFER ,WAIT 

initial to  WRITE_BUFFER do{  }

 on write from WRITE_BUFFER to WAIT   
 on wait from WAIT to STATUS_WRITE   
 on contin from STATUS_WRITE to WRITE_BUFFER   
 on fail from STATUS_WRITE to WRITE_BUFFER   
 on ok_write from STATUS_WRITE to DONE   
 on finish from DONE to WRITE_BUFFER   


end

 
atomic type memory_library

   
	export port  syncPort  setWrite     
	export port  syncPort  checkCRC     
	export port  syncPort  setRead   
 
	place S0 

initial to  S0 do{  }

 on setWrite from S0 to S0   
 on setRead from S0 to S0   
 on checkCRC from S0 to S0   


end

 
atomic type HK_PL_processActionFlowWithAbort

 
data int  timer ,period  
   
	export port  syncPort  I2C_res_TTC     
	export port  syncPort  ask     
	export port  syncPort  read_HK     
	export port  syncPort  I2C_res_PL     
	export port  syncPort  I2C_fail_PL     
	export port  syncPort  mem_res     
	export port  syncPort  I2C_ask_PL   
 
	place SEND_HK_REPORT ,ASK ,START ,I2C ,WAIT 

initial to  WAIT do{  
	timer=0; period = -1;  }

 on read_HK from WAIT to START  provided( (period==-1 || timer == period ) /* to increase the timer we need timer ports */ )   
 on I2C_ask_PL from START to I2C   
 on I2C_res_PL from I2C to SEND_HK_REPORT   
 on I2C_fail_PL from I2C to WAIT   
 on ask from SEND_HK_REPORT to ASK   
 on mem_res from ASK to WAIT   
 on I2C_res_TTC from ASK to WAIT   


end

 
atomic type HK_PL_FailureMonitoring

 
data int  timer ,max_timer  
   
	export port  syncPort  failure     
	export port  syncPort  success     
	export port  syncPort  I2C_res_PL     
	export port  syncPort  I2C_ask_PL   
 
	place NOMINAL ,CRITICAL_FAILURE ,ANOMALY 

initial to  NOMINAL do{  
	timer=0; max_timer = -1;  }

 on failure from NOMINAL to ANOMALY   
 on I2C_ask_PL from ANOMALY to CRITICAL_FAILURE  provided( (max_timer==-1 || timer > max_timer ) )   
 on success from ANOMALY to NOMINAL  provided( (max_timer==-1 || timer > max_timer ) )   
 on I2C_res_PL from CRITICAL_FAILURE to NOMINAL   


end

 
atomic type HK_PL_PacketStoreModeManager

   
	export port  syncPort  disable     
	export port  syncPort  enable     
	export port  syncPort  mem_write_req     
	export port  syncPort  ask_I2C_TTC   
 
	place TTC ,MEMORY 

initial to  MEMORY do{  }

 on disable from MEMORY to TTC   
 on mem_write_req from MEMORY to MEMORY   
 on ask_I2C_TTC from TTC to TTC   
 on enable from TTC to MEMORY   


end

 
atomic type HK_PL_ModeManager

   
	export port  syncPort  disable     
	export port  syncPort  enable     
	export port  syncPort  read_HK   
 
	place DISABLED ,ENABLED 

initial to  ENABLED do{  }

 on disable from ENABLED to DISABLED   
 on read_HK from ENABLED to ENABLED   
 on enable from DISABLED to ENABLED   


end

 
atomic type s3_5

   
	export port  syncPort  com     
	export port  syncPort  internal     
	export port  syncPort  enable_HK     
	export port  syncPort  cdms     
	export port  syncPort  eps     
	export port  syncPort  finish     
	export port  syncPort  pl   
 
	place IDLE ,START ,END 

initial to  IDLE do{  }

 on enable_HK from IDLE to START   
 on cdms from START to END   
 on pl from START to END   
 on eps from START to END   
 on com from START to END   
 on internal from END to START   
 on finish from START to IDLE   


end

 
atomic type s3_6

   
	export port  syncPort  com     
	export port  syncPort  internal     
	export port  syncPort  cdms     
	export port  syncPort  eps     
	export port  syncPort  finish     
	export port  syncPort  disable_HK     
	export port  syncPort  pl   
 
	place IDLE ,START ,END 

initial to  IDLE do{  }

 on disable_HK from IDLE to START   
 on cdms from START to END   
 on pl from START to END   
 on eps from START to END   
 on com from START to END   
 on internal from END to START   
 on finish from START to IDLE   


end

 
atomic type s15_1

   
	export port  syncPort  com     
	export port  syncPort  internal     
	export port  syncPort  enable_PS     
	export port  syncPort  cdms     
	export port  syncPort  eps     
	export port  syncPort  finish     
	export port  syncPort  pl   
 
	place IDLE ,START ,END 

initial to  IDLE do{  }

 on enable_PS from IDLE to START   
 on cdms from START to END   
 on pl from START to END   
 on eps from START to END   
 on com from START to END   
 on internal from END to START   
 on finish from START to IDLE   


end

 
atomic type s15_2

   
	export port  syncPort  com     
	export port  syncPort  internal     
	export port  syncPort  cdms     
	export port  syncPort  eps     
	export port  syncPort  finish     
	export port  syncPort  disable_PS     
	export port  syncPort  pl   
 
	place IDLE ,START ,END 

initial to  IDLE do{  }

 on disable_PS from IDLE to START   
 on cdms from START to END   
 on pl from START to END   
 on eps from START to END   
 on com from START to END   
 on internal from END to START   
 on finish from START to IDLE   


end

 
atomic type HK_EPS_processActionFlowWithAbort

 
data int  timer ,period  
   
	export port  syncPort  I2C_res_TTC     
	export port  syncPort  ask     
	export port  syncPort  read_HK     
	export port  syncPort  mem_res     
	export port  syncPort  I2C_ask_EPS     
	export port  syncPort  I2C_res_EPS     
	export port  syncPort  I2C_fail_EPS   
 
	place SEND_HK_REPORT ,ASK ,START ,I2C ,WAIT 

initial to  WAIT do{  
	timer=0; period=-1;  }

 on read_HK from WAIT to START  provided( (period==-1 || timer == period ) /* to increase the timer we need timer ports */ )   
 on I2C_ask_EPS from START to I2C   
 on I2C_res_EPS from I2C to SEND_HK_REPORT   
 on I2C_fail_EPS from I2C to WAIT   
 on ask from SEND_HK_REPORT to ASK   
 on mem_res from ASK to WAIT   
 on I2C_res_TTC from ASK to WAIT   


end

 
atomic type HK_EPS_FailureMonitoring

 
data int  timer ,max_timer  
   
	export port  syncPort  failure     
	export port  syncPort  success     
	export port  syncPort  I2C_ask_EPS     
	export port  syncPort  I2C_res_EPS   
 
	place NOMINAL ,CRITICAL_FAILURE ,ANOMALY 

initial to  NOMINAL do{  
	timer=0; max_timer=-1;  }

 on failure from NOMINAL to ANOMALY   
 on I2C_ask_EPS from ANOMALY to CRITICAL_FAILURE  provided( (max_timer==-1 || timer > max_timer ) )   
 on success from ANOMALY to NOMINAL  provided( (max_timer==-1 || timer > max_timer ) )   
 on I2C_res_EPS from CRITICAL_FAILURE to NOMINAL   


end

 
atomic type HK_EPS_PacketStoreModeManager

   
	export port  syncPort  disable     
	export port  syncPort  enable     
	export port  syncPort  mem_write_req     
	export port  syncPort  ask_I2C_TTC   
 
	place TTC ,MEMORY 

initial to  MEMORY do{  }

 on disable from MEMORY to TTC   
 on mem_write_req from MEMORY to MEMORY   
 on ask_I2C_TTC from TTC to TTC   
 on enable from TTC to MEMORY   


end

 
atomic type HK_EPS_ModeManager

   
	export port  syncPort  disable     
	export port  syncPort  enable     
	export port  syncPort  read_HK   
 
	place DISABLED ,ENABLED 

initial to  ENABLED do{  }

 on disable from ENABLED to DISABLED   
 on read_HK from ENABLED to ENABLED   
 on enable from DISABLED to ENABLED   


end

 
atomic type HK_COM_processActionFlowWithAbort

 
data int  timer ,period  
   
	export port  syncPort  I2C_res_COM     
	export port  syncPort  I2C_fail_COM     
	export port  syncPort  I2C_ask_COM     
	export port  syncPort  I2C_res_TTC     
	export port  syncPort  ask     
	export port  syncPort  read_HK     
	export port  syncPort  mem_res   
 
	place SEND_HK_REPORT ,ASK ,START ,I2C ,WAIT 

initial to  WAIT do{  
	timer=0; period=-1;  }

 on read_HK from WAIT to START  provided( (period==-1 || timer == period ) /* to increase the timer we need timer ports */ )   
 on I2C_ask_COM from START to I2C   
 on I2C_res_COM from I2C to SEND_HK_REPORT   
 on I2C_fail_COM from I2C to WAIT   
 on ask from SEND_HK_REPORT to ASK   
 on mem_res from ASK to WAIT   
 on I2C_res_TTC from ASK to WAIT   


end

 
atomic type HK_COM_FailureMonitoring

 
data int  timer ,max_timer  
   
	export port  syncPort  I2C_res_COM     
	export port  syncPort  failure     
	export port  syncPort  success     
	export port  syncPort  I2C_ask_COM   
 
	place NOMINAL ,CRITICAL_FAILURE ,ANOMALY 

initial to  NOMINAL do{  
	timer=0; max_timer=-1;  }

 on failure from NOMINAL to ANOMALY   
 on I2C_ask_COM from ANOMALY to CRITICAL_FAILURE  provided( (max_timer==-1 || timer > max_timer ) )   
 on success from ANOMALY to NOMINAL  provided( (max_timer==-1 || timer > max_timer ) )   
 on I2C_res_COM from CRITICAL_FAILURE to NOMINAL   


end

 
atomic type HK_COM_PacketStoreModeManager

   
	export port  syncPort  disable     
	export port  syncPort  enable     
	export port  syncPort  mem_write_req     
	export port  syncPort  ask_I2C_TTC   
 
	place TTC ,MEMORY 

initial to  MEMORY do{  }

 on disable from MEMORY to TTC   
 on mem_write_req from MEMORY to MEMORY   
 on ask_I2C_TTC from TTC to TTC   
 on enable from TTC to MEMORY   


end

 
atomic type HK_COM_ModeManager

   
	export port  syncPort  disable     
	export port  syncPort  enable     
	export port  syncPort  read_HK   
 
	place DISABLED ,ENABLED 

initial to  ENABLED do{  }

 on disable from ENABLED to DISABLED   
 on read_HK from ENABLED to ENABLED   
 on enable from DISABLED to ENABLED   


end

 
atomic type HK_CDMS_processActionFlowWithAbort

 
data int  timer ,period  
   
	export port  syncPort  ask     
	export port  syncPort  read_HK     
	export port  syncPort  mem_res     
	export port  syncPort  I2C_res   
 
	place SEND_HK_REPORT ,ASK ,WAIT 

initial to  WAIT do{  
	timer=0; period=-1;  }

 on read_HK from WAIT to SEND_HK_REPORT  provided( (period==-1 || timer == period ) /* to increase the timer we need timer ports */ )   
 on ask from SEND_HK_REPORT to ASK   
 on mem_res from ASK to WAIT   
 on I2C_res from ASK to WAIT   


end

 
atomic type HK_CDMS_PacketStoreModeManager

   
	export port  syncPort  disable     
	export port  syncPort  enable     
	export port  syncPort  mem_write_req     
	export port  syncPort  I2C_ask_sat   
 
	place MEMORY ,SAT 

initial to  MEMORY do{  }

 on disable from MEMORY to SAT   
 on mem_write_req from MEMORY to MEMORY   
 on I2C_ask_sat from SAT to SAT   
 on enable from SAT to MEMORY   


end

 
atomic type HK_CDMS_ModeManager

   
	export port  syncPort  disable     
	export port  syncPort  enable     
	export port  syncPort  read_HK   
 
	place DISABLED ,ENABLED 

initial to  ENABLED do{  }

 on disable from ENABLED to DISABLED   
 on read_HK from ENABLED to ENABLED   
 on enable from DISABLED to ENABLED   


end



compound type CubETH


	component WatchdogReset WATCHDOG 
	component CdmsStatusActionFlow CDMSSTATACTFL 
	component MessageLibrary MSGLIB 
	component sMutex s128_4_MUX 
	component s128_4ActionFlowWithAbort s128_4_ACTFLAB 
	component sMutex s128_1_MUX 
	component s128_1ActionFlowWithAbort s128_1_ACTFLAB 
	component sMutex s128_5_MUX 
	component s128_5ActionFlowWithAbort s128_5_ACTFLAB 
	component sMutex STAT_VER_MUX 
	component statusVerificationActionFlowWithAbort STAT_VER_ACTFLAB 
	component plModeManager PLMODMNG 
	component data_transferActionFlowWithAbort DATRANS_ACTFLAB 
	component data_transferModeManager DATRANS_MODMNG 
	component I2C_satActionFlow I2C_SAT_ACTFL 
	component I2C_satActionFlowWithAbort I2C_SAT_ACTFLAB 
	component I2C_satModeManagement I2C_SAT_MODMNG 
	component I2C_satLibrary I2C_SAT_LIB 
	component Log LOG 
	component sMutex LOG_MUX 
	component sMutex MEM_MUX 
	component flash_memory_readActionFlowWithAbort MEMRD_ACTFLAB 
	component flash_memory_writeActionFlowWithAbort MEMWR_ACTFLAB 
	component flash_memory_readModeManager MEMRD_MODMNG 
	component flash_memory_writeModeManager MEMWR_MODMNG 
	component memory_library MEMLIB 
	component HK_PL_processActionFlowWithAbort HKPL_ACTFLAB 
	component sMutex HKPL_MUX 
	component HK_PL_FailureMonitoring HKPL_FAILMON 
	component HK_PL_PacketStoreModeManager HKPL_PSMODMNG 
	component HK_PL_ModeManager HKPL_MODMNG 
	component HK_EPS_processActionFlowWithAbort HKEPS_ACTFLAB 
	component sMutex HKEPS_MUX 
	component HK_EPS_FailureMonitoring HKEPS_FAILMON 
	component HK_EPS_PacketStoreModeManager HKEPS_PSMODMNG 
	component HK_EPS_ModeManager HKEPS_MODMNG 
	component HK_COM_processActionFlowWithAbort HKCOM_ACTFLAB 
	component sMutex HKCOM_MUX 
	component HK_COM_FailureMonitoring HKCOM_FAILMON 
	component HK_COM_PacketStoreModeManager HKCOM_PSMODMNG 
	component HK_COM_ModeManager HKCOM_MODMNG 
	component HK_CDMS_processActionFlowWithAbort HKCDMS_ACTFLAB 
	component sMutex HKCDMS_MUX 
	component HK_CDMS_PacketStoreModeManager HKCDMS_PSMODMNG 
	component HK_CDMS_ModeManager HKCDMS_MODMNG 
	component s3_5 S3_5 
	component s3_6 S3_6 
	component s15_1 S15_1 
	component s15_2 S15_2 

 
	/******** cdms_status ***********/
	connector RDV2 internal_watchdog ( WATCHDOG.internal_watchdog ,CDMSSTATACTFL.start_reset   )  
	connector RDV2 reset_done ( CDMSSTATACTFL.done_reset ,WATCHDOG.done   )  
	/* TODO: add in .smv file : HKPL_I2C_res4 > ..3, 2, 1 & 2 > 1, 3 > 1 */
	connector RDV5 cdms_I2C_res4 ( CDMSSTATACTFL.I2C_res ,MSGLIB.decodeMessage ,I2C_SAT_ACTFL.return ,I2C_SAT_ACTFLAB.return ,I2C_SAT_MODMNG.return   )  
	connector RDV4 cdms_I2C_res3 ( CDMSSTATACTFL.I2C_res ,MSGLIB.decodeMessage ,I2C_SAT_ACTFL.return ,I2C_SAT_ACTFLAB.return   )  
	connector RDV5 cdms_I2C_res_error2 ( CDMSSTATACTFL.I2C_res ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.error2 ,LOG.log ,LOG_MUX.take   )  
	connector RDV5 cdms_I2C_res_error3 ( CDMSSTATACTFL.I2C_res ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.error3 ,LOG.log ,LOG_MUX.take   )  
	connector RDV3 cdms_I2C_ask ( CDMSSTATACTFL.I2C_ask ,MSGLIB.composeMessage ,I2C_SAT_ACTFLAB.request   )  
	connector RDV2 done ( CDMSSTATACTFL.done_reset ,WATCHDOG.done   )  
	/******** s_128_4 ***********/
	connector RDV2 s128_4_fail ( s128_4_MUX.release ,s128_4_ACTFLAB.fail   )  
	connector RDV2 s128_4_wrong_state ( s128_4_MUX.release ,s128_4_ACTFLAB.wrong_state   )  
	connector RDV2 s128_4_takeTC ( s128_4_MUX.take ,s128_4_ACTFLAB.tc128_4   )  
	connector RDV2 s128_4_exec ( s128_4_ACTFLAB.exec ,PLMODMNG.exec   )  
	/* TODO: add in .smv file : s128_4_success2 > s128_4_success1 */
	connector RDV2 s128_4_success1 ( s128_4_MUX.release ,s128_4_ACTFLAB.executed   )  
	connector RDV3 s128_4_success2 ( s128_4_MUX.release ,s128_4_ACTFLAB.executed ,PLMODMNG.to_started   )  
	connector RDV3 s128_4_I2C_ask ( s128_4_ACTFLAB.I2C_ask ,MSGLIB.composeMessage ,I2C_SAT_ACTFLAB.request   )  
	connector RDV2 s128_4_I2C_res ( s128_4_ACTFLAB.I2C_res ,MSGLIB.decodeMessage   )  
	connector RDV6 s128_4_I2C_fail_error2 ( s128_4_MUX.release ,s128_4_ACTFLAB.I2C_fail ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.error2 ,LOG.log ,LOG_MUX.take   )  
	connector RDV6 s128_4_I2C_fail_error3 ( s128_4_MUX.release ,s128_4_ACTFLAB.I2C_fail ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.error3 ,LOG.log ,LOG_MUX.take   )  
	/******** s_128_1 ***********/
	connector RDV2 s128_1_fail ( s128_1_MUX.release ,s128_1_ACTFLAB.fail   )  
	connector RDV2 s128_1_wrong_state ( s128_1_MUX.release ,s128_1_ACTFLAB.wrong_state   )  
	connector RDV2 s128_1_takeTC ( s128_1_MUX.take ,s128_1_ACTFLAB.tc128_1   )  
	connector RDV2 s128_1_load ( s128_1_ACTFLAB.load ,PLMODMNG.load   )  
	/* TODO: add in .smv file : s128_4_success2 > s128_4_success1 */
	connector RDV2 s128_1_success1 ( s128_1_MUX.release ,s128_1_ACTFLAB.loaded   )  
	connector RDV3 s128_1_success2 ( s128_1_MUX.release ,s128_1_ACTFLAB.loaded ,PLMODMNG.to_scenario_ready   )  
	connector RDV3 s128_1_I2C_ask ( s128_1_ACTFLAB.I2C_ask ,MSGLIB.composeMessage ,I2C_SAT_ACTFLAB.request   )  
	connector RDV2 s128_1_I2C_res ( s128_1_ACTFLAB.I2C_res ,MSGLIB.decodeMessage   )  
	connector RDV6 s128_1_I2C_fail_error2 ( s128_1_MUX.release ,s128_1_ACTFLAB.I2C_fail ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.error2 ,LOG.log ,LOG_MUX.take   )  
	connector RDV6 s128_1_I2C_fail_error3 ( s128_1_MUX.release ,s128_1_ACTFLAB.I2C_fail ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.error3 ,LOG.log ,LOG_MUX.take   )  
	/******** s_128_5 ***********/
	connector RDV2 s128_5_fail ( s128_5_MUX.release ,s128_5_ACTFLAB.fail   )  
	/* TODO: add in .smv file : s128_5_aborted2 > s128_5_aborted1 */
	connector RDV2 s128_5_aborted1 ( s128_5_MUX.release ,s128_5_ACTFLAB.aborted   )  
	connector RDV3 s128_5_aborted2 ( s128_5_MUX.release ,s128_5_ACTFLAB.aborted ,PLMODMNG.to_idle   )  
	connector RDV2 s128_5_takeTC ( s128_5_MUX.take ,s128_5_ACTFLAB.tc128_5   )  
	connector RDV3 s128_5_I2C_ask ( s128_5_ACTFLAB.I2C_ask ,MSGLIB.composeMessage ,I2C_SAT_ACTFLAB.request   )  
	connector RDV2 s128_5_I2C_res ( s128_5_ACTFLAB.I2C_res ,MSGLIB.decodeMessage   )  
	connector RDV6 s128_5_I2C_fail_error2 ( s128_5_MUX.release ,s128_5_ACTFLAB.I2C_fail ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.error2 ,LOG.log ,LOG_MUX.take   )  
	connector RDV6 s128_5_I2C_fail_error3 ( s128_5_MUX.release ,s128_5_ACTFLAB.I2C_fail ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.error3 ,LOG.log ,LOG_MUX.take   )  
	/******** status verification ***********/
	connector RDV3 status_verif_started ( STAT_VER_MUX.take ,STAT_VER_ACTFLAB.started ,PLMODMNG.started   )  
	/* TODO: add in .smv file : status_verif_result2 > status_verif_result1 */
	connector RDV2 status_verif_result1 ( STAT_VER_MUX.release ,STAT_VER_ACTFLAB.full   )  
	connector RDV3 status_verif_result2 ( STAT_VER_MUX.release ,STAT_VER_ACTFLAB.full ,PLMODMNG.to_result_ready   )  
	/* TODO: add in .smv file : status_verif_to_idle2 > status_verif_to_idle1 */
	connector RDV2 status_verif_to_idle1 ( STAT_VER_MUX.release ,STAT_VER_ACTFLAB.complete   )  
	connector RDV3 status_verif_to_idle2 ( STAT_VER_MUX.release ,STAT_VER_ACTFLAB.complete ,PLMODMNG.to_idle   )  
	connector RDV3 status_verif_I2C_ask ( STAT_VER_ACTFLAB.I2C_ask ,MSGLIB.composeMessage ,I2C_SAT_ACTFLAB.request   )  
	connector RDV2 status_verif_I2C_res ( STAT_VER_ACTFLAB.I2C_res ,MSGLIB.decodeMessage   )  
	connector RDV5 status_verif_I2C_fail_error2 ( STAT_VER_ACTFLAB.I2C_fail ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.error2 ,LOG.log ,LOG_MUX.take   )  
	connector RDV5 status_verif_I2C_fail_error3 ( STAT_VER_ACTFLAB.I2C_fail ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.error3 ,LOG.log ,LOG_MUX.take   )  
	/* TODO: add in .smv file : payload_ready2 > 1 */
	connector SINGLE payload_ready1 ( PLMODMNG.ready   )  
	connector RDV2 payload_ready2 ( PLMODMNG.ready ,DATRANS_MODMNG.to_busy   )  
	connector RDV2 data_transfer_start ( DATRANS_ACTFLAB.start ,DATRANS_MODMNG.contin   )  
	/* TODO: add in .smv file : data_transfer_done4 > ..3, 2, 1 & 2 > 1, 3 > 1 */
	connector SINGLE data_transfer_done1 ( DATRANS_ACTFLAB.done   )  
	connector RDV2 data_transfer_done2 ( DATRANS_ACTFLAB.done ,DATRANS_MODMNG.to_idle   )  
	connector RDV2 data_transfer_done3 ( DATRANS_ACTFLAB.done ,PLMODMNG.to_started   )  
	connector RDV3 data_transfer_done4 ( DATRANS_ACTFLAB.done ,DATRANS_MODMNG.to_idle ,PLMODMNG.to_started   )  
	connector RDV3 data_transfer_I2C_ask ( DATRANS_ACTFLAB.I2C_ask ,MSGLIB.composeMessage ,I2C_SAT_ACTFLAB.request   )  
	connector RDV2 data_transfer_I2C_res ( DATRANS_ACTFLAB.I2C_res ,MSGLIB.decodeMessage   )  
	connector RDV5 data_transfer_I2C_fail_error2 ( DATRANS_ACTFLAB.I2C_fail ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.error2 ,LOG.log ,LOG_MUX.take   )  
	connector RDV5 data_transfer_I2C_fail_error3 ( DATRANS_ACTFLAB.I2C_fail ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.error3 ,LOG.log ,LOG_MUX.take   )  
	/* PL_to_MEM → write (Flash memory)  + setwrite (MEM_LIB) */
	connector RDV4 data_transfer_ask_mem2 ( DATRANS_ACTFLAB.ask_mem ,MEM_MUX.take ,MEMLIB.setWrite ,MEMWR_MODMNG.write   )  
	connector RDV3 data_transfer_ask_mem1 ( DATRANS_ACTFLAB.ask_mem ,MEM_MUX.take ,MEMLIB.setWrite   )  
	/* PL_to_MEM → ok_write (Flash memory)  */
	connector RDV6 data_transfer_mem_res2 ( DATRANS_ACTFLAB.mem_res ,MEMWR_ACTFLAB.ok_write ,LOG.log ,LOG_MUX.take ,MEM_MUX.release ,MEMWR_MODMNG.done   )  
	connector RDV5 data_transfer_mem_res1 ( DATRANS_ACTFLAB.mem_res ,MEMWR_ACTFLAB.ok_write ,LOG.log ,LOG_MUX.take ,MEM_MUX.release   )  
	/******** I2C_sat ***********/
	connector RDV3 I2C_sat_poll ( I2C_SAT_ACTFL.poll ,I2C_SAT_MODMNG.poll ,I2C_SAT_LIB.masterRead   )  
	/* TODO: add in .smv file : I2C_send3 > 2, 1 */
	connector RDV3 I2C_sat_send2 ( I2C_SAT_ACTFLAB.send ,I2C_SAT_LIB.masterWrite ,I2C_SAT_MODMNG.send   )  
	connector RDV2 I2C_sat_send1 ( I2C_SAT_ACTFLAB.send ,I2C_SAT_LIB.masterWrite   )  
	connector RDV3 I2C_sat_error1 ( I2C_SAT_ACTFL.error1 ,LOG.log ,LOG_MUX.take   )  
	/******** logger ***********/
	connector RDV2 log_release ( LOG_MUX.release ,LOG.done   )  
	/* TODO: add in .smv file : flash_memory_read2 > 1 */
	connector RDV3 flash_memory_setRead2 ( MEM_MUX.take ,MEMLIB.setRead ,MEMRD_MODMNG.read   )  
	connector RDV2 flash_memory_setRead1 ( MEM_MUX.take ,MEMLIB.setRead   )  
	connector RDV2 flash_memory_read ( MEMRD_MODMNG.contin ,MEMRD_ACTFLAB.read   )  
	/* TODO: add in .smv file : flash_memory_read_fail2 > flash_memory_read_fail1 */
	connector RDV5 flash_memory_read_fail2 ( MEMRD_ACTFLAB.fail ,LOG.log ,LOG_MUX.take ,MEM_MUX.release ,MEMRD_MODMNG.done   )  
	connector RDV4 flash_memory_read_fail1 ( MEMRD_ACTFLAB.fail ,LOG.log ,LOG_MUX.take ,MEM_MUX.release   )  
	/* TODO: add in .smv file : flash_memory_ok_read2 > flash_memory_ok_read1 */
	connector RDV5 flash_memory_ok_read2 ( MEMRD_ACTFLAB.ok_read ,LOG.log ,LOG_MUX.take ,MEM_MUX.release ,MEMRD_MODMNG.done   )  
	connector RDV4 flash_memory_ok_read1 ( MEMRD_ACTFLAB.ok_read ,LOG.log ,LOG_MUX.take ,MEM_MUX.release   )  
	connector RDV2 flash_memory_checkCRC ( MEMRD_ACTFLAB.check_CRC ,MEMLIB.checkCRC   )  
	connector RDV3 flash_memory_bad_CRC ( MEMRD_ACTFLAB.bad_CRC ,LOG.log ,LOG_MUX.take   )  
	connector RDV2 flash_memory_write ( MEMWR_MODMNG.contin ,MEMWR_ACTFLAB.write   )  
	/******** HK_PL ***********/
	connector RDV3 HKPL_read_HK ( HKPL_MUX.take ,HKPL_ACTFLAB.read_HK ,HKPL_MODMNG.read_HK   )  
	/* TODO: add in .smv file : HKPL_mem_res_fail2 > HKPL_mem_res_fail1 */
	connector RDV8 HKPL_mem_res_fail2 ( HKPL_MUX.release ,HKPL_ACTFLAB.mem_res ,HKPL_FAILMON.success ,MEMWR_ACTFLAB.fail ,LOG.log ,LOG_MUX.take ,MEM_MUX.release ,MEMWR_MODMNG.done   )  
	connector RDV7 HKPL_mem_res_fail1 ( HKPL_MUX.release ,HKPL_ACTFLAB.mem_res ,HKPL_FAILMON.success ,MEMWR_ACTFLAB.fail ,LOG.log ,LOG_MUX.take ,MEM_MUX.release   )  
	/* TODO: add in .smv file : HKPL_mem_res_return2 > HKPL_mem_res_return1 */
	connector RDV8 HKPL_mem_res_return2 ( HKPL_MUX.release ,HKPL_ACTFLAB.mem_res ,HKPL_FAILMON.success ,MEMWR_ACTFLAB.ok_write ,LOG.log ,LOG_MUX.take ,MEM_MUX.release ,MEMWR_MODMNG.done   )  
	connector RDV7 HKPL_mem_res_return1 ( HKPL_MUX.release ,HKPL_ACTFLAB.mem_res ,HKPL_FAILMON.success ,MEMWR_ACTFLAB.ok_write ,LOG.log ,LOG_MUX.take ,MEM_MUX.release   )  
	connector RDV3 HKPL_I2C_res_TTC ( HKPL_MUX.release ,HKPL_ACTFLAB.I2C_res_TTC ,HKPL_FAILMON.success   )  
	/* start: HK_to_I2C, MSG_LIB, I2C_SAT */
	connector RDV3 HKPL_I2C_ask ( HKPL_ACTFLAB.I2C_ask_PL ,MSGLIB.composeMessage ,I2C_SAT_ACTFLAB.request   )  
	/* TODO: add in .smv file : HKPL_I2C_res4 > ..3, 2, 1 & 2 > 1, 3 > 1 */
	connector RDV5 HKPL_I2C_res4 ( HKPL_ACTFLAB.I2C_res_PL ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.return ,I2C_SAT_ACTFL.return ,I2C_SAT_MODMNG.return   )  
	connector RDV4 HKPL_I2C_res3 ( HKPL_ACTFLAB.I2C_res_PL ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.return ,I2C_SAT_ACTFL.return   )  
	connector RDV7 HKPL_I2C_fail_error2 ( HKPL_ACTFLAB.I2C_fail_PL ,HKPL_MUX.release ,HKPL_FAILMON.failure ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.error2 ,LOG.log ,LOG_MUX.take   )  
	connector RDV7 HKPL_I2C_fail_error3 ( HKPL_ACTFLAB.I2C_fail_PL ,HKPL_MUX.release ,HKPL_FAILMON.failure ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.error3 ,LOG.log ,LOG_MUX.take   )  
	/* start: HK_to_I2C_NOFAIL, I2C_SAT */
	connector RDV2 HKPL_I2C_nofail_ask ( HKPL_FAILMON.I2C_ask_PL ,I2C_SAT_ACTFLAB.request   )  
	/* TODO: add in .smv file : HKPL_I2C_res4 > ..3, 2, 1 & 2 > 1, 3 > 1 */
	connector RDV4 HKPL_I2C_nofail_res4 ( HKPL_FAILMON.I2C_res_PL ,I2C_SAT_ACTFLAB.return ,I2C_SAT_ACTFL.return ,I2C_SAT_MODMNG.return   )  
	connector RDV3 HKPL_I2C_nofail_res3 ( HKPL_FAILMON.I2C_res_PL ,I2C_SAT_ACTFLAB.return ,I2C_SAT_ACTFL.return   )  
	connector RDV4 HKPL_I2C_nofail__error2 ( HKPL_FAILMON.I2C_res_PL ,I2C_SAT_ACTFLAB.error2 ,LOG.log ,LOG_MUX.take   )  
	connector RDV4 HKPL_I2C_nofail__error3 ( HKPL_FAILMON.I2C_res_PL ,I2C_SAT_ACTFLAB.error3 ,LOG.log ,LOG_MUX.take   )  
	/* end: HK_to_I2C_NOFAIL, I2C_SAT */
	connector RDV2 HKPL_ask_I2C_TTC ( HKPL_ACTFLAB.ask ,HKPL_PSMODMNG.ask_I2C_TTC   )  
	connector RDV5 HKPL_mem_write_req2 ( HKPL_ACTFLAB.ask ,HKPL_PSMODMNG.mem_write_req ,MEM_MUX.take ,MEMLIB.setWrite ,MEMWR_MODMNG.write   )  
	connector RDV4 HKPL_mem_write_req1 ( HKPL_ACTFLAB.ask ,HKPL_PSMODMNG.mem_write_req ,MEM_MUX.take ,MEMLIB.setWrite   )  
	/* TODO for all: add in .smv file : ...pl2 > 1 */
	connector SINGLE s3_5_pl1 ( S3_5.pl   )  
	connector RDV2 s3_5_pl2 ( S3_5.pl ,HKPL_MODMNG.enable   )  
	connector SINGLE s3_6_pl1 ( S3_6.pl   )  
	connector RDV2 s3_6_pl2 ( S3_6.pl ,HKPL_MODMNG.disable   )  
	connector SINGLE s15_1_pl1 ( S15_1.pl   )  
	connector RDV2 s15_1_pl2 ( S15_1.pl ,HKPL_PSMODMNG.enable   )  
	connector SINGLE s15_2_pl1 ( S15_2.pl   )  
	connector RDV2 s15_2_pl2 ( S15_2.pl ,HKPL_PSMODMNG.disable   )  
	/******** HK_EPS ***********/
	connector RDV3 HKEPS_read_HK ( HKEPS_MUX.take ,HKEPS_ACTFLAB.read_HK ,HKEPS_MODMNG.read_HK   )  
	/* TODO: add in .smv file : HKEPS_mem_res_fail2 > HKEPS_mem_res_fail1 */
	connector RDV8 HKEPS_mem_res_fail2 ( HKEPS_MUX.release ,HKEPS_ACTFLAB.mem_res ,HKEPS_FAILMON.success ,MEMWR_ACTFLAB.fail ,LOG.log ,LOG_MUX.take ,MEM_MUX.release ,MEMWR_MODMNG.done   )  
	connector RDV7 HKEPS_mem_res_fail1 ( HKEPS_MUX.release ,HKEPS_ACTFLAB.mem_res ,HKEPS_FAILMON.success ,MEMWR_ACTFLAB.fail ,LOG.log ,LOG_MUX.take ,MEM_MUX.release   )  
	/* TODO: add in .smv file : HKEPS_mem_res_return2 > HKEPS_mem_res_return1 */
	connector RDV8 HKEPS_mem_res_return2 ( HKEPS_MUX.release ,HKEPS_ACTFLAB.mem_res ,HKEPS_FAILMON.success ,MEMWR_ACTFLAB.ok_write ,LOG.log ,LOG_MUX.take ,MEM_MUX.release ,MEMWR_MODMNG.done   )  
	connector RDV7 HKEPS_mem_res_return1 ( HKEPS_MUX.release ,HKEPS_ACTFLAB.mem_res ,HKEPS_FAILMON.success ,MEMWR_ACTFLAB.ok_write ,LOG.log ,LOG_MUX.take ,MEM_MUX.release   )  
	connector RDV3 HKEPS_I2C_res_TTC ( HKEPS_MUX.release ,HKEPS_ACTFLAB.I2C_res_TTC ,HKEPS_FAILMON.success   )  
	/* start: HK_to_I2C, MSG_LIB, I2C_SAT */
	connector RDV3 HKEPS_I2C_ask ( HKEPS_ACTFLAB.I2C_ask_EPS ,MSGLIB.composeMessage ,I2C_SAT_ACTFLAB.request   )  
	/* TODO: add in .smv file : HKEPS_I2C_res4 > ..3, 2, 1 & 2 > 1, 3 > 1 */
	connector RDV5 HKEPS_I2C_res4 ( HKEPS_ACTFLAB.I2C_res_EPS ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.return ,I2C_SAT_ACTFL.return ,I2C_SAT_MODMNG.return   )  
	connector RDV4 HKEPS_I2C_res3 ( HKEPS_ACTFLAB.I2C_res_EPS ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.return ,I2C_SAT_ACTFL.return   )  
	connector RDV7 HKEPS_I2C_fail_error2 ( HKEPS_ACTFLAB.I2C_fail_EPS ,HKEPS_MUX.release ,HKEPS_FAILMON.failure ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.error2 ,LOG.log ,LOG_MUX.take   )  
	connector RDV7 HKEPS_I2C_fail_error3 ( HKEPS_ACTFLAB.I2C_fail_EPS ,HKEPS_MUX.release ,HKEPS_FAILMON.failure ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.error3 ,LOG.log ,LOG_MUX.take   )  
	/* start: HK_to_I2C_NOFAIL, I2C_SAT */
	connector RDV2 HKEPS_I2C_nofail_ask ( HKEPS_FAILMON.I2C_ask_EPS ,I2C_SAT_ACTFLAB.request   )  
	/* TODO: add in .smv file : HKEPS_I2C_res4 > ..3, 2, 1 & 2 > 1, 3 > 1 */
	connector RDV4 HKEPS_I2C_nofail_res4 ( HKEPS_FAILMON.I2C_res_EPS ,I2C_SAT_ACTFLAB.return ,I2C_SAT_ACTFL.return ,I2C_SAT_MODMNG.return   )  
	connector RDV3 HKEPS_I2C_nofail_res3 ( HKEPS_FAILMON.I2C_res_EPS ,I2C_SAT_ACTFLAB.return ,I2C_SAT_ACTFL.return   )  
	connector RDV4 HKEPS_I2C_nofail_error2 ( HKEPS_FAILMON.I2C_res_EPS ,I2C_SAT_ACTFLAB.error2 ,LOG.log ,LOG_MUX.take   )  
	connector RDV4 HKEPS_I2C_nofail_error3 ( HKEPS_FAILMON.I2C_res_EPS ,I2C_SAT_ACTFLAB.error3 ,LOG.log ,LOG_MUX.take   )  
	/* end: HK_to_I2C_NOFAIL, I2C_SAT */
	connector RDV2 HKEPS_ask_I2C_TTC ( HKEPS_ACTFLAB.ask ,HKEPS_PSMODMNG.ask_I2C_TTC   )  
	connector RDV5 HKEPS_mem_write_req2 ( HKEPS_ACTFLAB.ask ,HKEPS_PSMODMNG.mem_write_req ,MEM_MUX.take ,MEMLIB.setWrite ,MEMWR_MODMNG.write   )  
	connector RDV4 HKEPS_mem_write_req1 ( HKEPS_ACTFLAB.ask ,HKEPS_PSMODMNG.mem_write_req ,MEM_MUX.take ,MEMLIB.setWrite   )  
	/* TODO for all: add in .smv file : ...eps2 > 1 */
	connector SINGLE s3_5_eps1 ( S3_5.eps   )  
	connector RDV2 s3_5_eps2 ( S3_5.eps ,HKEPS_MODMNG.enable   )  
	connector SINGLE s3_6_eps1 ( S3_6.eps   )  
	connector RDV2 s3_6_eps2 ( S3_6.eps ,HKEPS_MODMNG.disable   )  
	connector SINGLE s15_1_eps1 ( S15_1.eps   )  
	connector RDV2 s15_1_eps2 ( S15_1.eps ,HKEPS_PSMODMNG.enable   )  
	connector SINGLE s15_2_eps1 ( S15_2.eps   )  
	connector RDV2 s15_2_eps2 ( S15_2.eps ,HKEPS_PSMODMNG.disable   )  
	/******** HK_COM ***********/
	connector RDV3 HKCOM_read_HK ( HKCOM_MUX.take ,HKCOM_ACTFLAB.read_HK ,HKCOM_MODMNG.read_HK   )  
	/* TODO: add in .smv file : HKCOM_mem_res_fail2 > HKCOM_mem_res_fail1 */
	connector RDV8 HKCOM_mem_res_fail2 ( HKCOM_MUX.release ,HKCOM_ACTFLAB.mem_res ,HKCOM_FAILMON.success ,MEMWR_ACTFLAB.fail ,LOG.log ,LOG_MUX.take ,MEM_MUX.release ,MEMWR_MODMNG.done   )  
	connector RDV7 HKCOM_mem_res_fail1 ( HKCOM_MUX.release ,HKCOM_ACTFLAB.mem_res ,HKCOM_FAILMON.success ,MEMWR_ACTFLAB.fail ,LOG.log ,LOG_MUX.take ,MEM_MUX.release   )  
	/* TODO: add in .smv file : HKCOM_mem_res_return2 > HKCOM_mem_res_return1 */
	connector RDV8 HKCOM_mem_res_return2 ( HKCOM_MUX.release ,HKCOM_ACTFLAB.mem_res ,HKCOM_FAILMON.success ,MEMWR_ACTFLAB.ok_write ,LOG.log ,LOG_MUX.take ,MEM_MUX.release ,MEMWR_MODMNG.done   )  
	connector RDV7 HKCOM_mem_res_return1 ( HKCOM_MUX.release ,HKCOM_ACTFLAB.mem_res ,HKCOM_FAILMON.success ,MEMWR_ACTFLAB.ok_write ,LOG.log ,LOG_MUX.take ,MEM_MUX.release   )  
	connector RDV3 HKCOM_I2C_res_TTC ( HKCOM_MUX.release ,HKCOM_ACTFLAB.I2C_res_TTC ,HKCOM_FAILMON.success   )  
	/* start: HK_to_I2C, MSG_LIB, I2C_SAT */
	connector RDV3 HKCOM_I2C_ask ( HKCOM_ACTFLAB.I2C_ask_COM ,MSGLIB.composeMessage ,I2C_SAT_ACTFLAB.request   )  
	/* TODO: add in .smv file : HKCOM_I2C_res4 > ..3, 2, 1 & 2 > 1, 3 > 1 */
	connector RDV5 HKCOM_I2C_res4 ( HKCOM_ACTFLAB.I2C_res_COM ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.return ,I2C_SAT_ACTFL.return ,I2C_SAT_MODMNG.return   )  
	connector RDV4 HKCOM_I2C_res3 ( HKCOM_ACTFLAB.I2C_res_COM ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.return ,I2C_SAT_ACTFL.return   )  
	connector RDV7 HKCOM_I2C_fail_error2 ( HKCOM_ACTFLAB.I2C_fail_COM ,HKCOM_MUX.release ,HKCOM_FAILMON.failure ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.error2 ,LOG.log ,LOG_MUX.take   )  
	connector RDV7 HKCOM_I2C_fail_error3 ( HKCOM_ACTFLAB.I2C_fail_COM ,HKCOM_MUX.release ,HKCOM_FAILMON.failure ,MSGLIB.decodeMessage ,I2C_SAT_ACTFLAB.error3 ,LOG.log ,LOG_MUX.take   )  
	/* start: HK_to_I2C_NOFAIL, I2C_SAT */
	connector RDV2 HKCOM_I2C_nofail_ask ( HKCOM_FAILMON.I2C_ask_COM ,I2C_SAT_ACTFLAB.request   )  
	/* TODO: add in .smv file : HKCOM_I2C_res4 > ..3, 2, 1 & 2 > 1, 3 > 1 */
	connector RDV4 HKCOM_I2C_nofail_res4 ( HKCOM_FAILMON.I2C_res_COM ,I2C_SAT_ACTFLAB.return ,I2C_SAT_ACTFL.return ,I2C_SAT_MODMNG.return   )  
	connector RDV3 HKCOM_I2C_nofail_res3 ( HKCOM_FAILMON.I2C_res_COM ,I2C_SAT_ACTFLAB.return ,I2C_SAT_ACTFL.return   )  
	connector RDV4 HKCOM_I2C_nofail__error2 ( HKCOM_FAILMON.I2C_res_COM ,I2C_SAT_ACTFLAB.error2 ,LOG.log ,LOG_MUX.take   )  
	connector RDV4 HKCOM_I2C_nofail__error3 ( HKCOM_FAILMON.I2C_res_COM ,I2C_SAT_ACTFLAB.error3 ,LOG.log ,LOG_MUX.take   )  
	/* end: HK_to_I2C_NOFAIL, I2C_SAT */
	connector RDV2 HKCOM_ask_I2C_TTC ( HKCOM_ACTFLAB.ask ,HKCOM_PSMODMNG.ask_I2C_TTC   )  
	/* HKCOM_mem_write_req2> HKCOM_mem_write_req1  */
	connector RDV5 HKCOM_mem_write_req2 ( HKCOM_ACTFLAB.ask ,HKCOM_PSMODMNG.mem_write_req ,MEM_MUX.take ,MEMLIB.setWrite ,MEMWR_MODMNG.write   )  
	connector RDV4 HKCOM_mem_write_req1 ( HKCOM_ACTFLAB.ask ,HKCOM_PSMODMNG.mem_write_req ,MEM_MUX.take ,MEMLIB.setWrite   )  
	/* TODO for all: add in .smv file : ...com2 > 1 */
	connector SINGLE s3_5_com1 ( S3_5.com   )  
	connector RDV2 s3_5_com2 ( S3_5.com ,HKCOM_MODMNG.enable   )  
	connector SINGLE s3_6_com1 ( S3_6.com   )  
	connector RDV2 s3_6_com2 ( S3_6.com ,HKCOM_MODMNG.disable   )  
	connector SINGLE s15_1_com1 ( S15_1.com   )  
	connector RDV2 s15_1_com2 ( S15_1.com ,HKCOM_PSMODMNG.enable   )  
	connector SINGLE s15_2_com1 ( S15_2.com   )  
	connector RDV2 s15_2_com2 ( S15_2.com ,HKCOM_PSMODMNG.disable   )  
	/******** HK_CDMS ***********/
	connector RDV3 HKCDMS_read_HK ( HKCDMS_MUX.take ,HKCDMS_ACTFLAB.read_HK ,HKCDMS_MODMNG.read_HK   )  
	/* TODO: add in .smv file : HKCDMS_mem_res_fail2 > HKCDMS_mem_res_fail1 */
	connector RDV7 HKCDMS_mem_res_fail2 ( HKCDMS_MUX.release ,HKCDMS_ACTFLAB.mem_res ,MEMWR_ACTFLAB.fail ,LOG.log ,LOG_MUX.take ,MEM_MUX.release ,MEMWR_MODMNG.done   )  
	connector RDV6 HKCDMS_mem_res_fail1 ( HKCDMS_MUX.release ,HKCDMS_ACTFLAB.mem_res ,MEMWR_ACTFLAB.fail ,LOG.log ,LOG_MUX.take ,MEM_MUX.release   )  
	/* TODO: add in .smv file : HKCDMS_mem_res_return2 > HKCDMS_mem_res_return1 */
	connector RDV7 HKCDMS_mem_res_return2 ( HKCDMS_MUX.release ,HKCDMS_ACTFLAB.mem_res ,MEMWR_ACTFLAB.ok_write ,LOG.log ,LOG_MUX.take ,MEM_MUX.release ,MEMWR_MODMNG.done   )  
	connector RDV6 HKCDMS_mem_res_return1 ( HKCDMS_MUX.release ,HKCDMS_ACTFLAB.mem_res ,MEMWR_ACTFLAB.ok_write ,LOG.log ,LOG_MUX.take ,MEM_MUX.release   )  
	connector RDV3 HKCDMS_I2C_res ( HKCDMS_MUX.release ,HKCDMS_ACTFLAB.I2C_res ,MSGLIB.decodeMessage   )  
	connector RDV3 HKCDMS_ask_sat ( HKCDMS_ACTFLAB.ask ,HKCDMS_PSMODMNG.I2C_ask_sat ,MSGLIB.composeMessage   )  
	/* HKCDMS_mem_write_req2> HKCDMS_mem_write_req1  */
	connector RDV5 HKCDMS_mem_write_req2 ( HKCDMS_ACTFLAB.ask ,HKCDMS_PSMODMNG.mem_write_req ,MEM_MUX.take ,MEMLIB.setWrite ,MEMWR_MODMNG.write   )  
	connector RDV4 HKCDMS_mem_write_req1 ( HKCDMS_ACTFLAB.ask ,HKCDMS_PSMODMNG.mem_write_req ,MEM_MUX.take ,MEMLIB.setWrite   )  
	/* TODO for all: add in .smv file : ...cdms2 > 1 */
	connector SINGLE s3_5_cdms1 ( S3_5.cdms   )  
	connector RDV2 s3_5_cdms2 ( S3_5.cdms ,HKCDMS_MODMNG.enable   )  
	connector SINGLE s3_6_cdms1 ( S3_6.cdms   )  
	connector RDV2 s3_6_cdms2 ( S3_6.cdms ,HKCDMS_MODMNG.disable   )  
	connector SINGLE s15_1_cdms1 ( S15_1.cdms   )  
	connector RDV2 s15_1_cdms2 ( S15_1.cdms ,HKCDMS_PSMODMNG.enable   )  
	connector SINGLE s15_2_cdms1 ( S15_2.cdms   )  
	connector RDV2 s15_2_cdms2 ( S15_2.cdms ,HKCDMS_PSMODMNG.disable   )  
	connector SINGLE CDMSSTATACTFL_start ( CDMSSTATACTFL.start   )  
	connector SINGLE CDMSSTATACTFL_finish ( CDMSSTATACTFL.finish   )  
	connector SINGLE s128_4_ACTFLAB_start ( s128_4_ACTFLAB.start   )  
	connector SINGLE s128_1_ACTFLAB_start ( s128_1_ACTFLAB.start   )  
	connector SINGLE DATRANS_ACTFLAB_not_done ( DATRANS_ACTFLAB.not_done   )  
	connector SINGLE I2C_SAT_ACTFL_no_message ( I2C_SAT_ACTFL.no_message   )  
	connector SINGLE MEMRD_ACTFLAB_finish ( MEMRD_ACTFLAB.finish   )  
	connector SINGLE MEMWR_ACTFLAB_wait ( MEMWR_ACTFLAB.wait   )  
	connector SINGLE MEMWR_ACTFLAB_contin ( MEMWR_ACTFLAB.contin   )  
	connector SINGLE MEMWR_ACTFLAB_finish ( MEMWR_ACTFLAB.finish   )  
	connector SINGLE S3_5_internal ( S3_5.internal   )  
	connector SINGLE S3_5_enable_HK ( S3_5.enable_HK   )  
	connector SINGLE S3_5_finish ( S3_5.finish   )  
	connector SINGLE S3_6_internal ( S3_6.internal   )  
	connector SINGLE S3_6_finish ( S3_6.finish   )  
	connector SINGLE S3_6_disable_HK ( S3_6.disable_HK   )  
	connector SINGLE S15_1_internal ( S15_1.internal   )  
	connector SINGLE S15_1_enable_PS ( S15_1.enable_PS   )  
	connector SINGLE S15_1_finish ( S15_1.finish   )  
	connector SINGLE S15_2_internal ( S15_2.internal   )  
	connector SINGLE S15_2_finish ( S15_2.finish   )  
	connector SINGLE S15_2_disable_PS ( S15_2.disable_PS   ) 

	
 
	priority cdms_I2C_res3_after_cdms_I2C_res4 		cdms_I2C_res3 < cdms_I2C_res4 
	priority s128_4_success1_after_s128_4_success2 		s128_4_success1 < s128_4_success2 
	priority s128_1_success1_after_s128_1_success2 		s128_1_success1 < s128_1_success2 
	priority s128_5_aborted1_after_s128_5_aborted2 		s128_5_aborted1 < s128_5_aborted2 
	priority status_verif_result1_after_status_verif_result2 		status_verif_result1 < status_verif_result2 
	priority data_transfer_ask_mem1_after_data_transfer_ask_mem2 		data_transfer_ask_mem1 < data_transfer_ask_mem2 
	priority data_transfer_mem_res1_after_data_transfer_mem_res2 		data_transfer_mem_res1 < data_transfer_mem_res2 
	priority payload_ready1_after_payload_ready2 		payload_ready1 < payload_ready2 
	priority status_verif_to_idle1_after_status_verif_to_idle2 		status_verif_to_idle1 < status_verif_to_idle2 
	priority flash_memory_setRead1_after_flash_memory_setRead2 		flash_memory_setRead1 < flash_memory_setRead2 
	priority flash_memory_read_fail1_after_flash_memory_read_fail2 		flash_memory_read_fail1 < flash_memory_read_fail2 
	priority flash_memory_ok_read1_after_flash_memory_ok_read2 		flash_memory_ok_read1 < flash_memory_ok_read2 
	priority data_transfer_done1_after_data_transfer_done2 		data_transfer_done1 < data_transfer_done2 
	priority data_transfer_done1_after_data_transfer_done3 		data_transfer_done1 < data_transfer_done3 
	priority data_transfer_done1_after_data_transfer_done4 		data_transfer_done1 < data_transfer_done4 
	priority data_transfer_done2_after_data_transfer_done4 		data_transfer_done2 < data_transfer_done4 
	priority data_transfer_done3_after_data_transfer_done4 		data_transfer_done3 < data_transfer_done4 
	priority I2C_sat_send1_after_I2C_sat_send2 		I2C_sat_send1 < I2C_sat_send2 
	priority HKPL_I2C_res3_after_HKPL_I2C_res4 		HKPL_I2C_res3 < HKPL_I2C_res4 
	priority HKPL_I2C_nofail_res3_after_HKPL_I2C_nofail_res4 		HKPL_I2C_nofail_res3 < HKPL_I2C_nofail_res4 
	priority HKPL_mem_write_req1_after_HKPL_mem_write_req2 		HKPL_mem_write_req1 < HKPL_mem_write_req2 
	priority HKPL_mem_res_fail1_after_HKPL_mem_res_fail2 		HKPL_mem_res_fail1 < HKPL_mem_res_fail2 
	priority HKPL_mem_res_return1_after_HKPL_mem_res_return2 		HKPL_mem_res_return1 < HKPL_mem_res_return2 
	priority s3_5_pl1_after_s3_5_pl2 		s3_5_pl1 < s3_5_pl2 
	priority s3_6_pl1_after_s3_6_pl2 		s3_6_pl1 < s3_6_pl2 
	priority s15_1_pl1_after_s15_1_pl2 		s15_1_pl1 < s15_1_pl2 
	priority s15_2_pl1_after_s15_2_pl2 		s15_2_pl1 < s15_2_pl2 
	priority HKEPS_I2C_res3_after_HKEPS_I2C_res4 		HKEPS_I2C_res3 < HKEPS_I2C_res4 
	priority HKEPS_I2C_nofail_res3_after_HKEPS_I2C_nofail_res4 		HKEPS_I2C_nofail_res3 < HKEPS_I2C_nofail_res4 
	priority HKEPS_mem_write_req1_after_HKEPS_mem_write_req2 		HKEPS_mem_write_req1 < HKEPS_mem_write_req2 
	priority HKEPS_mem_res_fail1_after_HKEPS_mem_res_fail2 		HKEPS_mem_res_fail1 < HKEPS_mem_res_fail2 
	priority HKEPS_mem_res_return1_after_HKEPS_mem_res_return2 		HKEPS_mem_res_return1 < HKEPS_mem_res_return2 
	priority s3_5_eps1_after_s3_5_eps2 		s3_5_eps1 < s3_5_eps2 
	priority s3_6_eps1_after_s3_6_eps2 		s3_6_eps1 < s3_6_eps2 
	priority s15_1_eps1_after_s15_1_eps2 		s15_1_eps1 < s15_1_eps2 
	priority s15_2_eps1_after_s15_2_eps2 		s15_2_eps1 < s15_2_eps2 
	priority HKCOM_I2C_res3_after_HKCOM_I2C_res4 		HKCOM_I2C_res3 < HKCOM_I2C_res4 
	priority HKCOM_I2C_nofail_res3_after_HKCOM_I2C_nofail_res4 		HKCOM_I2C_nofail_res3 < HKCOM_I2C_nofail_res4 
	priority HKCOM_mem_write_req1_after_HKCOM_mem_write_req2 		HKCOM_mem_write_req1 < HKCOM_mem_write_req2 
	priority HKCOM_mem_res_fail1_after_HKCOM_mem_res_fail2 		HKCOM_mem_res_fail1 < HKCOM_mem_res_fail2 
	priority HKCOM_mem_res_return1_after_HKCOM_mem_res_return2 		HKCOM_mem_res_return1 < HKCOM_mem_res_return2 
	priority s3_5_com1_after_s3_5_com2 		s3_5_com1 < s3_5_com2 
	priority s3_6_com1_after_s3_6_com2 		s3_6_com1 < s3_6_com2 
	priority s15_1_com1_after_s15_1_com2 		s15_1_com1 < s15_1_com2 
	priority s15_2_com1_after_s15_2_com2 		s15_2_com1 < s15_2_com2 
	priority HKCDMS_mem_write_req1_after_HKCDMS_mem_write_req2 		HKCDMS_mem_write_req1 < HKCDMS_mem_write_req2 
	priority HKCDMS_mem_res_fail1_after_HKCDMS_mem_res_fail2 		HKCDMS_mem_res_fail1 < HKCDMS_mem_res_fail2 
	priority HKCDMS_mem_res_return1_after_HKCDMS_mem_res_return2 		HKCDMS_mem_res_return1 < HKCDMS_mem_res_return2 
	priority s3_5_cdms1_after_s3_5_cdms2 		s3_5_cdms1 < s3_5_cdms2 
	priority s3_6_cdms1_after_s3_6_cdms2 		s3_6_cdms1 < s3_6_cdms2 
	priority s15_1_cdms1_after_s15_1_cdms2 		s15_1_cdms1 < s15_1_cdms2 
	priority s15_2_cdms1_after_s15_2_cdms2 		s15_2_cdms1 < s15_2_cdms2

end

component CubETH Root

end